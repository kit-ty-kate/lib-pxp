let eof = 0
let invalid = 1
let unicode_baseChar = 2
let ideographic = 3
let extender = 4
let ascii_digit = 5
let unicode_digit = 6
let combiningChar = 7
let otherChar = 8
let char_41 = 9
let char_42 = 10
let char_43 = 11
let char_44 = 12
let char_45 = 13
let char_46 = 14
let char_47 = 15
let char_48 = 16
let char_49 = 17
let char_4a = 18
let char_4b = 19
let char_4c = 20
let char_4d = 21
let char_4e = 22
let char_4f = 23
let char_50 = 24
let char_51 = 25
let char_52 = 26
let char_53 = 27
let char_54 = 28
let char_55 = 29
let char_56 = 30
let char_57 = 31
let char_58 = 32
let char_59 = 33
let char_5a = 34
let char_61 = 35
let char_62 = 36
let char_63 = 37
let char_64 = 38
let char_65 = 39
let char_66 = 40
let char_67 = 41
let char_68 = 42
let char_69 = 43
let char_6a = 44
let char_6b = 45
let char_6c = 46
let char_6d = 47
let char_6e = 48
let char_6f = 49
let char_70 = 50
let char_71 = 51
let char_72 = 52
let char_73 = 53
let char_74 = 54
let char_75 = 55
let char_76 = 56
let char_77 = 57
let char_78 = 58
let char_79 = 59
let char_7a = 60
let char_3c = 61
let char_3e = 62
let char_3f = 63
let char_21 = 64
let char_2d = 65
let char_2f = 66
let char_5b = 67
let char_5d = 68
let char_26 = 69
let char_23 = 70
let char_3b = 71
let char_25 = 72
let char_2b = 73
let char_2a = 74
let char_7c = 75
let char_2c = 76
let char_28 = 77
let char_29 = 78
let char_27 = 79
let char_3d = 80
let char_2e = 81
let char_3a = 82
let char_5f = 83
let char_7b = 84
let char_7d = 85
let char_22 = 86
let char_0a = 87
let char_0d = 88
let char_09 = 89
let char_20 = 90

let one_char_classes = [
  (0x41, 09);
  (0x42, 10);
  (0x43, 11);
  (0x44, 12);
  (0x45, 13);
  (0x46, 14);
  (0x47, 15);
  (0x48, 16);
  (0x49, 17);
  (0x4a, 18);
  (0x4b, 19);
  (0x4c, 20);
  (0x4d, 21);
  (0x4e, 22);
  (0x4f, 23);
  (0x50, 24);
  (0x51, 25);
  (0x52, 26);
  (0x53, 27);
  (0x54, 28);
  (0x55, 29);
  (0x56, 30);
  (0x57, 31);
  (0x58, 32);
  (0x59, 33);
  (0x5a, 34);
  (0x61, 35);
  (0x62, 36);
  (0x63, 37);
  (0x64, 38);
  (0x65, 39);
  (0x66, 40);
  (0x67, 41);
  (0x68, 42);
  (0x69, 43);
  (0x6a, 44);
  (0x6b, 45);
  (0x6c, 46);
  (0x6d, 47);
  (0x6e, 48);
  (0x6f, 49);
  (0x70, 50);
  (0x71, 51);
  (0x72, 52);
  (0x73, 53);
  (0x74, 54);
  (0x75, 55);
  (0x76, 56);
  (0x77, 57);
  (0x78, 58);
  (0x79, 59);
  (0x7a, 60);
  (0x3c, 61);
  (0x3e, 62);
  (0x3f, 63);
  (0x21, 64);
  (0x2d, 65);
  (0x2f, 66);
  (0x5b, 67);
  (0x5d, 68);
  (0x26, 69);
  (0x23, 70);
  (0x3b, 71);
  (0x25, 72);
  (0x2b, 73);
  (0x2a, 74);
  (0x7c, 75);
  (0x2c, 76);
  (0x28, 77);
  (0x29, 78);
  (0x27, 79);
  (0x3d, 80);
  (0x2e, 81);
  (0x3a, 82);
  (0x5f, 83);
  (0x7b, 84);
  (0x7d, 85);
  (0x22, 86);
  (0x0a, 87);
  (0x0d, 88);
  (0x09, 89);
  (0x20, 90);
 ]

let nb_classes = 91

# 40 "pxp_wlex_utf8_01.mll"
 
  open Pxp_types
  open Pxp_lexer_types
  open Pxp_lex_aux
    (* Hint: All the tok_* values are declared here *)

  let lexerset = ref (Pxp_lexers.dummy_lexer_set) ;;
    (* Every lexer module knows its lexerset, so it can call
     * all other lexer modules by !lexerset.name_of_lexer 
     *)

# 193 "pxp_wlex_utf8_01.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\004\000\001\000\
    \003\000\005\000\007\000\009\000\255\255\011\000\034\000\075\000\
    \038\000\050\000\030\000\249\255\044\000\044\000\079\000\056\000\
    \083\000\087\000\091\000\140\000\182\000\104\000\248\255\004\000\
    \212\000\000\000\000\000\253\255\002\000\000\000\000\000\000\000\
    \001\000\254\255\047\001\077\001\108\000\156\000\079\000\247\255\
    \246\255\245\255\214\000\251\255\208\000\017\000\250\255\008\000\
    \019\000\000\000\168\001\115\000\198\001\252\255\033\002\063\002\
    \244\255\137\000\207\000\228\255\000\000\185\000\222\255\009\000\
    \220\255\143\000\227\255\026\002\001\000\005\000\003\000\013\000\
    \230\255\231\255\004\000\006\000\008\000\004\000\014\000\000\000\
    \232\255\030\000\020\000\032\000\024\000\020\000\233\255\033\000\
    \042\000\037\000\032\000\235\255\053\000\065\000\100\000\157\000\
    \171\000\234\255\154\000\229\255\226\000\224\255\232\000\226\255\
    \204\000\197\000\202\000\211\000\211\000\216\000\206\000\226\000\
    \236\255\204\000\224\000\226\000\237\255\215\000\220\000\224\000\
    \252\000\009\001\238\255\014\001\021\001\039\001\031\001\045\001\
    \047\001\239\255\243\255\242\255\241\255\154\002\060\001\063\001\
    \065\001\224\001\184\002\019\003\236\000\087\002\049\003\071\001\
    \087\001\172\001\030\003\140\003\170\003\236\003\010\004\240\000\
    \240\000\239\000\003\001\192\003\010\001\084\001\101\004\088\001\
    \182\001\150\003\131\004\222\004\008\001\009\001\068\001\068\001\
    \072\001\054\001\074\001\017\001\102\001\213\001\226\001\115\002\
    \250\001\252\004\255\000\254\000\087\005\094\001\099\001\028\001\
    \049\002\104\001\117\005\004\001\007\001\208\005\036\001\195\003\
    \238\005\182\004\014\001\073\006\102\001\019\002\158\002\113\004\
    \047\005\103\006\019\001\046\001\086\001\168\005\194\006\031\002\
    \073\002\140\003\083\006\224\006\211\001\059\007\089\007\155\006\
    \019\007\115\001\120\001\066\002\060\002\072\002\081\002\127\001\
    \242\001\132\001\201\002\212\002\236\002\138\001\215\001\114\001\
    \077\002";
  Lexing.lex_backtrk = 
   "\001\000\255\255\255\255\255\255\255\255\255\255\000\000\001\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\007\000\000\000\
    \001\000\003\000\005\000\255\255\255\255\255\255\004\000\255\255\
    \255\255\002\000\000\000\008\000\005\000\006\000\255\255\003\000\
    \004\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\011\000\000\000\001\000\003\000\005\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\
    \003\000\001\000\037\000\000\000\002\000\255\255\004\000\005\000\
    \255\255\015\000\255\255\255\255\030\000\032\000\255\255\034\000\
    \255\255\255\255\255\255\036\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\255\255\001\000\005\000\007\000\010\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\005\000\009\000\012\000\
    \013\000\015\000\020\000\021\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\002\000\004\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\013\000\001\000\003\000\004\000\007\000\009\000\255\255\
    \255\255\255\255\011\000\001\000\003\000\004\000\255\255\255\255\
    \003\000\004\000\007\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\003\000\006\000\012\000\014\000\015\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\001\000\000\000\002\000\255\255\
    \006\000\007\000\008\000\009\000\010\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\000\
    \003\000";
  Lexing.lex_default = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\008\000\
    \008\000\010\000\010\000\010\000\000\000\010\000\015\000\015\000\
    \255\255\023\000\020\000\000\000\020\000\255\255\255\255\023\000\
    \255\255\255\255\255\255\255\255\032\000\255\255\000\000\255\255\
    \032\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\043\000\043\000\255\255\052\000\050\000\000\000\
    \000\000\000\000\050\000\000\000\052\000\056\000\000\000\255\255\
    \056\000\255\255\062\000\255\255\141\000\000\000\062\000\063\000\
    \000\000\255\255\255\255\000\000\110\000\108\000\000\000\255\255\
    \000\000\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\000\000\108\000\000\000\110\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\141\000\143\000\143\000\
    \012\000\149\000\155\000\150\000\255\255\149\000\150\000\255\255\
    \255\255\255\255\255\255\155\000\163\000\171\000\166\000\255\255\
    \255\255\255\255\255\255\163\000\255\255\255\255\166\000\255\255\
    \255\255\255\255\171\000\171\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\180\000\182\000\182\000\184\000\
    \184\000\188\000\255\255\255\255\188\000\193\000\192\000\255\255\
    \192\000\193\000\197\000\255\255\255\255\197\000\255\255\201\000\
    \203\000\201\000\255\255\203\000\255\255\255\255\255\255\255\255\
    \213\000\214\000\255\255\255\255\255\255\213\000\214\000\255\255\
    \255\255\255\255\255\255\221\000\255\255\221\000\222\000\224\000\
    \224\000\255\255\255\255\230\000\229\000\229\000\230\000\255\255\
    \255\255\255\255\234\000\236\000\236\000\255\255\240\000\255\255\
    \240\000";
  Lexing.lex_trans = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\037\000\041\000\084\000\
    \033\000\051\000\054\000\255\255\255\255\086\000\088\000\036\000\
    \040\000\089\000\082\000\090\000\038\000\100\000\255\255\255\255\
    \083\000\039\000\019\000\255\255\085\000\087\000\255\255\255\255\
    \255\255\255\255\255\255\095\000\255\255\255\255\005\000\004\000\
    \091\000\092\000\255\255\255\255\093\000\094\000\096\000\097\000\
    \255\255\255\255\003\000\098\000\099\000\001\000\012\000\002\000\
    \009\000\035\000\009\000\012\000\011\000\034\000\009\000\013\000\
    \009\000\057\000\009\000\255\255\255\255\106\000\081\000\255\255\
    \255\255\101\000\055\000\255\255\255\255\102\000\111\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\017\000\016\000\255\255\021\000\103\000\255\255\255\255\
    \018\000\255\255\255\255\255\255\255\255\016\000\016\000\016\000\
    \016\000\024\000\021\000\022\000\022\000\022\000\022\000\024\000\
    \255\255\255\255\255\255\255\255\030\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\051\000\255\255\
    \255\255\255\255\026\000\026\000\026\000\026\000\022\000\022\000\
    \022\000\022\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\026\000\026\000\026\000\026\000\255\255\255\255\
    \104\000\255\255\255\255\255\255\255\255\255\255\255\255\029\000\
    \029\000\029\000\029\000\044\000\044\000\044\000\044\000\105\000\
    \140\000\028\000\059\000\059\000\059\000\059\000\074\000\075\000\
    \255\255\255\255\138\000\139\000\255\255\255\255\255\255\255\255\
    \107\000\131\000\125\000\121\000\255\255\114\000\116\000\117\000\
    \113\000\118\000\255\255\029\000\029\000\029\000\029\000\115\000\
    \255\255\112\000\119\000\120\000\122\000\123\000\124\000\126\000\
    \127\000\128\000\035\000\255\255\255\255\012\000\031\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \109\000\129\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\130\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\051\000\035\000\132\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\000\
    \255\255\109\000\133\000\255\255\255\255\255\255\255\255\255\255\
    \134\000\135\000\136\000\137\000\041\000\035\000\111\000\255\255\
    \255\255\041\000\035\000\019\000\049\000\064\000\140\000\164\000\
    \120\000\173\000\041\000\174\000\152\000\255\255\255\255\175\000\
    \176\000\177\000\178\000\179\000\180\000\255\255\012\000\187\000\
    \187\000\167\000\064\000\012\000\152\000\167\000\255\255\255\255\
    \196\000\196\000\048\000\255\255\255\255\019\000\255\255\255\255\
    \255\255\255\255\054\000\205\000\255\255\030\000\255\255\255\255\
    \255\255\255\255\019\000\255\255\048\000\255\255\255\255\049\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\046\000\255\255\
    \255\255\153\000\064\000\255\255\255\255\045\000\044\000\044\000\
    \044\000\044\000\255\255\255\255\255\255\255\255\168\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\061\000\019\000\
    \206\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \072\000\255\255\181\000\139\000\063\000\063\000\063\000\063\000\
    \255\255\154\000\047\000\232\000\019\000\154\000\154\000\154\000\
    \154\000\154\000\154\000\169\000\231\000\041\000\019\000\169\000\
    \169\000\169\000\169\000\169\000\169\000\234\000\255\255\255\255\
    \035\000\012\000\255\255\255\255\255\255\255\255\255\255\154\000\
    \154\000\154\000\154\000\154\000\154\000\255\255\255\255\051\000\
    \000\000\169\000\169\000\169\000\169\000\169\000\169\000\000\000\
    \064\000\138\000\255\255\255\255\000\000\073\000\070\000\049\000\
    \255\255\063\000\255\255\067\000\071\000\061\000\066\000\255\255\
    \060\000\019\000\030\000\047\000\048\000\064\000\065\000\069\000\
    \255\255\063\000\255\255\255\255\255\255\255\255\068\000\059\000\
    \059\000\059\000\059\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \205\000\183\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\076\000\216\000\147\000\181\000\077\000\
    \146\000\255\255\220\000\220\000\220\000\220\000\035\000\239\000\
    \078\000\255\255\255\255\233\000\000\000\012\000\000\000\047\000\
    \148\000\048\000\000\000\000\000\255\255\255\255\181\000\255\255\
    \255\255\000\000\255\255\255\255\000\000\000\000\000\000\255\255\
    \255\255\255\255\000\000\000\000\000\000\255\255\216\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\000\000\000\000\255\255\
    \255\255\217\000\041\000\079\000\000\000\080\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \047\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \041\000\051\000\061\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\061\000\255\255\
    \051\000\000\000\255\255\207\000\255\255\255\255\000\000\207\000\
    \207\000\207\000\207\000\207\000\207\000\000\000\255\255\255\255\
    \255\255\061\000\000\000\000\000\000\000\000\000\000\000\183\000\
    \255\255\255\255\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\207\000\207\000\207\000\207\000\207\000\207\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\041\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\235\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\237\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\154\000\000\000\000\000\000\000\154\000\
    \154\000\154\000\154\000\154\000\154\000\235\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\154\000\154\000\154\000\154\000\154\000\154\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\151\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\051\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \035\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\218\000\000\000\000\000\255\255\218\000\218\000\218\000\
    \218\000\218\000\218\000\169\000\000\000\000\000\000\000\169\000\
    \169\000\169\000\169\000\169\000\169\000\000\000\000\000\000\000\
    \000\000\000\000\124\000\094\000\000\000\000\000\000\000\218\000\
    \218\000\218\000\218\000\218\000\218\000\000\000\000\000\000\000\
    \000\000\169\000\169\000\169\000\169\000\169\000\169\000\000\000\
    \255\255\255\255\000\000\049\000\064\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\012\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\030\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\157\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\162\000\158\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\159\000\160\000\
    \048\000\137\000\161\000\130\000\255\255\255\255\000\000\000\000\
    \200\000\000\000\255\255\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\047\000\202\000\054\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\012\000\172\000\255\255\170\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \165\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\207\000\000\000\
    \000\000\000\000\207\000\207\000\207\000\207\000\207\000\207\000\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\207\000\207\000\207\000\207\000\
    \207\000\207\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\047\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \035\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\138\000\255\255\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\137\000\
    \130\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\049\000\255\255\255\255\255\255\191\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\190\000\054\000\255\255\000\000\000\000\
    \255\255\255\255\189\000\035\000\186\000\187\000\187\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\047\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\209\000\049\000\255\255\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\049\000\000\000\
    \000\000\000\000\000\000\211\000\212\000\048\000\030\000\210\000\
    \051\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\047\000\255\255\255\255\255\255\198\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\030\000\054\000\255\255\000\000\
    \000\000\255\255\255\255\019\000\035\000\195\000\196\000\196\000\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\204\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \218\000\000\000\000\000\000\000\218\000\218\000\218\000\218\000\
    \218\000\218\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\218\000\218\000\
    \218\000\218\000\218\000\218\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \012\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\035\000\054\000\064\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\215\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \225\000\000\000\000\000\000\000\000\000\000\000\000\000\226\000\
    \061\000\054\000\000\000\000\000\222\000\222\000\222\000\222\000\
    \051\000\000\000\227\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\228\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\012\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\051\000\051\000\051\000\
    \051\000\222\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\222\000\000\000\000\000\051\000\051\000\051\000\220\000\
    \220\000\220\000\220\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_check = 
   "\068\000\007\000\007\000\008\000\008\000\009\000\009\000\010\000\
    \010\000\011\000\011\000\013\000\013\000\036\000\040\000\083\000\
    \031\000\053\000\053\000\056\000\056\000\085\000\087\000\033\000\
    \039\000\077\000\078\000\077\000\037\000\076\000\018\000\018\000\
    \082\000\038\000\014\000\014\000\084\000\086\000\014\000\014\000\
    \014\000\014\000\014\000\089\000\020\000\020\000\004\000\003\000\
    \090\000\091\000\017\000\017\000\092\000\093\000\095\000\096\000\
    \023\000\023\000\002\000\097\000\098\000\000\000\057\000\001\000\
    \007\000\034\000\008\000\009\000\009\000\031\000\010\000\011\000\
    \011\000\055\000\013\000\015\000\015\000\071\000\079\000\046\000\
    \046\000\100\000\053\000\015\000\056\000\101\000\068\000\005\000\
    \005\000\005\000\005\000\006\000\006\000\006\000\006\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\018\000\102\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\016\000\016\000\016\000\
    \016\000\017\000\020\000\021\000\021\000\021\000\021\000\023\000\
    \015\000\015\000\015\000\015\000\027\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\045\000\045\000\046\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\022\000\022\000\
    \022\000\022\000\024\000\024\000\024\000\024\000\025\000\025\000\
    \025\000\025\000\026\000\026\000\026\000\026\000\028\000\028\000\
    \103\000\069\000\028\000\028\000\028\000\028\000\028\000\029\000\
    \029\000\029\000\029\000\044\000\044\000\044\000\044\000\104\000\
    \065\000\027\000\059\000\059\000\059\000\059\000\073\000\073\000\
    \052\000\052\000\065\000\065\000\032\000\032\000\050\000\050\000\
    \106\000\112\000\113\000\114\000\032\000\066\000\115\000\116\000\
    \066\000\117\000\108\000\027\000\027\000\027\000\027\000\066\000\
    \110\000\066\000\118\000\119\000\121\000\122\000\123\000\125\000\
    \126\000\127\000\045\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \069\000\128\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\032\000\032\000\032\000\032\000\129\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\050\000\052\000\131\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\042\000\
    \042\000\108\000\132\000\042\000\042\000\042\000\042\000\042\000\
    \133\000\134\000\135\000\136\000\142\000\142\000\110\000\143\000\
    \143\000\144\000\144\000\148\000\159\000\160\000\161\000\162\000\
    \164\000\172\000\173\000\172\000\151\000\043\000\043\000\174\000\
    \175\000\176\000\177\000\178\000\179\000\043\000\186\000\187\000\
    \187\000\165\000\191\000\195\000\152\000\167\000\189\000\189\000\
    \196\000\196\000\198\000\190\000\190\000\202\000\180\000\180\000\
    \193\000\193\000\210\000\204\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\151\000\211\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\043\000\043\000\043\000\043\000\165\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\152\000\167\000\
    \204\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \058\000\058\000\180\000\212\000\058\000\058\000\058\000\058\000\
    \058\000\153\000\190\000\225\000\189\000\153\000\153\000\153\000\
    \153\000\153\000\153\000\168\000\226\000\231\000\193\000\168\000\
    \168\000\168\000\168\000\168\000\168\000\233\000\060\000\060\000\
    \237\000\239\000\060\000\060\000\060\000\060\000\060\000\153\000\
    \153\000\153\000\153\000\153\000\153\000\181\000\181\000\238\000\
    \255\255\168\000\168\000\168\000\168\000\168\000\168\000\255\255\
    \145\000\145\000\182\000\182\000\255\255\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\184\000\184\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \205\000\181\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\062\000\062\000\075\000\215\000\145\000\182\000\075\000\
    \145\000\062\000\220\000\220\000\220\000\220\000\238\000\238\000\
    \075\000\192\000\192\000\232\000\255\255\232\000\255\255\145\000\
    \145\000\145\000\255\255\255\255\228\000\228\000\184\000\063\000\
    \063\000\255\255\227\000\227\000\255\255\255\255\255\255\063\000\
    \229\000\229\000\255\255\255\255\255\255\240\000\216\000\255\255\
    \255\255\230\000\230\000\255\255\255\255\255\255\255\255\149\000\
    \149\000\215\000\205\000\075\000\255\255\075\000\062\000\062\000\
    \062\000\062\000\255\255\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\255\255\183\000\183\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\063\000\063\000\063\000\063\000\
    \192\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \216\000\227\000\228\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\141\000\141\000\149\000\255\255\229\000\149\000\
    \230\000\255\255\141\000\206\000\240\000\240\000\255\255\206\000\
    \206\000\206\000\206\000\206\000\206\000\255\255\149\000\149\000\
    \149\000\183\000\255\255\255\255\255\255\255\255\255\255\183\000\
    \146\000\146\000\255\255\255\255\146\000\146\000\146\000\146\000\
    \146\000\206\000\206\000\206\000\206\000\206\000\206\000\255\255\
    \255\255\234\000\234\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\235\000\235\000\255\255\141\000\
    \141\000\141\000\141\000\255\255\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
    \141\000\141\000\141\000\255\255\236\000\236\000\141\000\141\000\
    \141\000\141\000\141\000\141\000\141\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
    \146\000\146\000\234\000\255\255\146\000\146\000\146\000\146\000\
    \146\000\146\000\146\000\147\000\147\000\235\000\255\255\147\000\
    \147\000\147\000\147\000\147\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\154\000\255\255\255\255\255\255\154\000\
    \154\000\154\000\154\000\154\000\154\000\236\000\255\255\255\255\
    \255\255\150\000\150\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\150\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\154\000\154\000\154\000\154\000\154\000\154\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\147\000\154\000\255\255\147\000\
    \147\000\147\000\147\000\147\000\147\000\147\000\150\000\150\000\
    \150\000\150\000\255\255\150\000\150\000\150\000\150\000\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\150\000\255\255\255\255\255\255\150\000\150\000\150\000\
    \150\000\150\000\150\000\150\000\155\000\155\000\255\255\255\255\
    \255\255\217\000\255\255\255\255\155\000\217\000\217\000\217\000\
    \217\000\217\000\217\000\169\000\255\255\255\255\255\255\169\000\
    \169\000\169\000\169\000\169\000\169\000\255\255\255\255\255\255\
    \255\255\255\255\156\000\156\000\255\255\255\255\255\255\217\000\
    \217\000\217\000\217\000\217\000\217\000\255\255\255\255\255\255\
    \255\255\169\000\169\000\169\000\169\000\169\000\169\000\255\255\
    \163\000\163\000\255\255\199\000\199\000\255\255\255\255\255\255\
    \255\255\155\000\155\000\155\000\155\000\255\255\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\169\000\255\255\255\255\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\156\000\
    \255\255\255\255\255\255\255\255\157\000\157\000\156\000\156\000\
    \157\000\157\000\157\000\157\000\157\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\163\000\156\000\156\000\
    \199\000\156\000\156\000\156\000\163\000\163\000\255\255\255\255\
    \199\000\255\255\158\000\158\000\255\255\255\255\158\000\158\000\
    \158\000\158\000\158\000\255\255\163\000\163\000\255\255\163\000\
    \163\000\163\000\199\000\199\000\199\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
    \157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
    \157\000\157\000\157\000\157\000\157\000\157\000\255\255\255\255\
    \157\000\157\000\157\000\157\000\157\000\157\000\157\000\158\000\
    \158\000\158\000\158\000\158\000\158\000\158\000\158\000\158\000\
    \158\000\158\000\158\000\158\000\158\000\158\000\158\000\158\000\
    \158\000\158\000\158\000\158\000\255\255\255\255\158\000\158\000\
    \158\000\158\000\158\000\158\000\158\000\166\000\166\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\166\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\207\000\255\255\
    \255\255\255\255\207\000\207\000\207\000\207\000\207\000\207\000\
    \255\255\255\255\255\255\170\000\170\000\255\255\255\255\170\000\
    \170\000\170\000\170\000\170\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\207\000\207\000\207\000\207\000\
    \207\000\207\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\166\000\166\000\166\000\166\000\255\255\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\201\000\201\000\
    \207\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \170\000\170\000\170\000\170\000\170\000\170\000\170\000\170\000\
    \170\000\170\000\170\000\170\000\170\000\170\000\170\000\170\000\
    \170\000\170\000\170\000\170\000\170\000\255\255\255\255\170\000\
    \170\000\170\000\170\000\170\000\170\000\170\000\171\000\171\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\171\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\201\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\201\000\185\000\185\000\255\255\255\255\
    \185\000\185\000\185\000\185\000\185\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\201\000\201\000\201\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\171\000\171\000\171\000\171\000\255\255\
    \171\000\171\000\171\000\171\000\171\000\171\000\171\000\171\000\
    \171\000\171\000\171\000\171\000\171\000\171\000\171\000\208\000\
    \208\000\255\255\171\000\171\000\171\000\171\000\171\000\171\000\
    \171\000\185\000\185\000\185\000\185\000\185\000\185\000\185\000\
    \185\000\185\000\185\000\185\000\185\000\185\000\185\000\185\000\
    \185\000\185\000\185\000\185\000\185\000\185\000\255\255\255\255\
    \185\000\185\000\185\000\185\000\185\000\185\000\185\000\188\000\
    \188\000\255\255\255\255\255\255\255\255\255\255\255\255\188\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\208\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\208\000\194\000\194\000\255\255\
    \255\255\194\000\194\000\194\000\194\000\194\000\208\000\255\255\
    \255\255\255\255\255\255\208\000\208\000\208\000\208\000\208\000\
    \208\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\188\000\188\000\188\000\188\000\
    \255\255\188\000\188\000\188\000\188\000\188\000\188\000\188\000\
    \188\000\188\000\188\000\188\000\188\000\188\000\188\000\188\000\
    \213\000\213\000\255\255\188\000\188\000\188\000\188\000\188\000\
    \188\000\188\000\194\000\194\000\194\000\194\000\194\000\194\000\
    \194\000\194\000\194\000\194\000\194\000\194\000\194\000\194\000\
    \194\000\194\000\194\000\194\000\194\000\194\000\194\000\255\255\
    \255\255\194\000\194\000\194\000\194\000\194\000\194\000\194\000\
    \197\000\197\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \197\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\213\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\213\000\200\000\200\000\
    \255\255\255\255\200\000\200\000\200\000\200\000\200\000\213\000\
    \255\255\255\255\255\255\255\255\213\000\213\000\213\000\213\000\
    \213\000\213\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\197\000\197\000\197\000\
    \197\000\255\255\197\000\197\000\197\000\197\000\197\000\197\000\
    \197\000\197\000\197\000\197\000\197\000\197\000\197\000\197\000\
    \197\000\255\255\255\255\255\255\197\000\197\000\197\000\197\000\
    \197\000\197\000\197\000\200\000\200\000\200\000\200\000\200\000\
    \200\000\200\000\200\000\200\000\200\000\200\000\200\000\200\000\
    \200\000\200\000\200\000\200\000\200\000\200\000\200\000\200\000\
    \255\255\255\255\200\000\200\000\200\000\200\000\200\000\200\000\
    \200\000\203\000\203\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\203\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \218\000\255\255\255\255\255\255\218\000\218\000\218\000\218\000\
    \218\000\218\000\255\255\255\255\255\255\255\255\255\255\209\000\
    \209\000\255\255\255\255\209\000\209\000\209\000\209\000\209\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\218\000\218\000\
    \218\000\218\000\218\000\218\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\203\000\203\000\
    \203\000\203\000\255\255\203\000\203\000\203\000\203\000\203\000\
    \203\000\203\000\203\000\203\000\203\000\203\000\203\000\203\000\
    \203\000\203\000\218\000\223\000\223\000\203\000\203\000\203\000\
    \203\000\203\000\203\000\203\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
    \209\000\255\255\255\255\209\000\209\000\209\000\209\000\209\000\
    \209\000\209\000\214\000\214\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\214\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \223\000\255\255\255\255\255\255\255\255\255\255\255\255\223\000\
    \219\000\219\000\255\255\255\255\219\000\219\000\219\000\219\000\
    \219\000\255\255\223\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\223\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\214\000\
    \214\000\214\000\214\000\255\255\214\000\214\000\214\000\214\000\
    \214\000\214\000\214\000\214\000\214\000\214\000\214\000\214\000\
    \214\000\214\000\214\000\224\000\224\000\255\255\214\000\214\000\
    \214\000\214\000\214\000\214\000\214\000\219\000\219\000\219\000\
    \219\000\219\000\219\000\219\000\219\000\219\000\219\000\219\000\
    \219\000\219\000\219\000\219\000\219\000\219\000\219\000\219\000\
    \219\000\219\000\255\255\255\255\219\000\219\000\219\000\219\000\
    \219\000\219\000\219\000\221\000\221\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\221\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \224\000\255\255\255\255\255\255\255\255\255\255\255\255\224\000\
    \255\255\222\000\222\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\222\000\224\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\224\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \221\000\221\000\221\000\221\000\255\255\221\000\221\000\221\000\
    \221\000\221\000\221\000\221\000\221\000\221\000\221\000\221\000\
    \221\000\221\000\221\000\221\000\255\255\255\255\255\255\221\000\
    \221\000\221\000\221\000\221\000\221\000\221\000\222\000\222\000\
    \222\000\222\000\255\255\222\000\222\000\222\000\222\000\222\000\
    \222\000\222\000\222\000\222\000\222\000\222\000\222\000\222\000\
    \222\000\222\000\255\255\255\255\255\255\222\000\222\000\222\000\
    \222\000\222\000\222\000\222\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec detect_xml_pi engine lexbuf = 
  match engine __ocaml_lex_tables 0 lexbuf with
      | 0 ->
# 193 "pxp_wlex_utf8_01.mll"
      ( true )
# 806 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 195 "pxp_wlex_utf8_01.mll"
      ( false )
# 811 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [detect_xml_pi]"

and scan_pi_string engine lexbuf = 
  match engine __ocaml_lex_tables 7 lexbuf with
      | 0 ->
# 203 "pxp_wlex_utf8_01.mll"
      ( let len = 
	  Pxp_lexing.lexeme_len lexbuf in
	Some (Pxp_lexing.sub_lexeme lexbuf 0 (len-2)) 
      )
# 823 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 208 "pxp_wlex_utf8_01.mll"
      ( None )
# 828 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_pi_string]"

and scan_xml_pi engine lexbuf = 
  match engine __ocaml_lex_tables 14 lexbuf with
      | 0 ->
# 216 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
	let j = get_name_end s 0 in
	Pro_name (String.sub s 0 j)
      )
# 840 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 221 "pxp_wlex_utf8_01.mll"
      ( Pro_eq )
# 845 "pxp_wlex_utf8_01.ml"

  | 2 ->
# 223 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
	let j = String.index_from s 1 '\'' in
	Pro_string (String.sub s 1 (j-1))
      )
# 853 "pxp_wlex_utf8_01.ml"

  | 3 ->
# 228 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error ("Cannot find the second quotation mark"))
      )
# 859 "pxp_wlex_utf8_01.ml"

  | 4 ->
# 231 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
	let j = String.index_from s 1 '"' in
	Pro_string (String.sub s 1 (j-1))
      )
# 867 "pxp_wlex_utf8_01.ml"

  | 5 ->
# 236 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error ("Cannot find the second quotation mark"))
      )
# 873 "pxp_wlex_utf8_01.ml"

  | 6 ->
# 239 "pxp_wlex_utf8_01.mll"
      ( Pro_eof )
# 878 "pxp_wlex_utf8_01.ml"

  | 7 ->
# 241 "pxp_wlex_utf8_01.mll"
      ( (* Nothing matches: If at least a valid character follows, raise
         * the exception that this character is not allowed here. Otherwise,
         * raise Malformed_code.
         *)
        !lexerset.scan_character lexbuf;
	raise (WF_error("Illegal token or character")) 
      )
# 889 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_xml_pi]"

and scan_document engine lexbuf = 
  match engine __ocaml_lex_tables 27 lexbuf with
      | 0 ->
# 255 "pxp_wlex_utf8_01.mll"
      ( (* Scan the rest of the processing instruction: *)
	match !lexerset.scan_pi_string lexbuf with
  	  None ->
	    raise (WF_error ("Illegal processing instruction"))
	| Some pi ->
	    scan_pi pi !lexerset.scan_xml_pi, Document 
      )
# 904 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 263 "pxp_wlex_utf8_01.mll"
      ( tok_Doctype__Document_type )
# 909 "pxp_wlex_utf8_01.ml"

  | 2 ->
# 265 "pxp_wlex_utf8_01.mll"
      ( Comment_begin dummy_entity, (Comment Document) )
# 914 "pxp_wlex_utf8_01.ml"

  | 3 ->
# 267 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error "Declaration either malformed or not allowed in this context") 
      )
# 920 "pxp_wlex_utf8_01.ml"

  | 4 ->
# 270 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
	( Tag_beg (String.sub s 1 (String.length s - 1), dummy_entity), 
	  Within_tag_entry
        )
      )
# 929 "pxp_wlex_utf8_01.ml"

  | 5 ->
# 276 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error ("Illegal token")) )
# 934 "pxp_wlex_utf8_01.ml"

  | 6 ->
# 278 "pxp_wlex_utf8_01.mll"
      ( tok_Ignore__Document )
# 939 "pxp_wlex_utf8_01.ml"

  | 7 ->
# 280 "pxp_wlex_utf8_01.mll"
      ( tok_Eof__Document )
# 944 "pxp_wlex_utf8_01.ml"

  | 8 ->
# 282 "pxp_wlex_utf8_01.mll"
      ( (* Nothing matches: If at least a valid character follows, raise
         * the exception that this character is not allowed here. Otherwise,
         * raise Malformed_code.
         *)
        !lexerset.scan_character lexbuf;
 	raise (WF_error ("Content not allowed here"))
      )
# 955 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_document]"

and scan_document_type engine lexbuf = 
  match engine __ocaml_lex_tables 42 lexbuf with
      | 0 ->
# 296 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
	Name s, Document_type )
# 965 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 299 "pxp_wlex_utf8_01.mll"
      ( tok_Ignore__Document_type )
# 970 "pxp_wlex_utf8_01.ml"

  | 2 ->
# 301 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
	(Unparsed_string (String.sub s 1 (String.length s - 2))), Document_type )
# 976 "pxp_wlex_utf8_01.ml"

  | 3 ->
# 304 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error ("Cannot find the second quotation mark"))
      )
# 982 "pxp_wlex_utf8_01.ml"

  | 4 ->
# 307 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
	(Unparsed_string (String.sub s 1 (String.length s - 2))), Document_type )
# 988 "pxp_wlex_utf8_01.ml"

  | 5 ->
# 310 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error ("Cannot find the second quotation mark"))
      )
# 994 "pxp_wlex_utf8_01.ml"

  | 6 ->
# 313 "pxp_wlex_utf8_01.mll"
      ( tok_Dtd_begin__Declaration )
# 999 "pxp_wlex_utf8_01.ml"

  | 7 ->
# 315 "pxp_wlex_utf8_01.mll"
      ( tok_Doctype_rangle__Document )
# 1004 "pxp_wlex_utf8_01.ml"

  | 8 ->
# 317 "pxp_wlex_utf8_01.mll"
      ( tok_Eof__Document_type )
# 1009 "pxp_wlex_utf8_01.ml"

  | 9 ->
# 319 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error("References to general entities not allowed here")) )
# 1014 "pxp_wlex_utf8_01.ml"

  | 10 ->
# 321 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error("References to parameter entities not allowed here")) )
# 1019 "pxp_wlex_utf8_01.ml"

  | 11 ->
# 323 "pxp_wlex_utf8_01.mll"
      ( (* Nothing matches: If at least a valid character follows, raise
         * the exception that this character is not allowed here. Otherwise,
         * raise Malformed_code.
         *)
        !lexerset.scan_character lexbuf;
 	raise (WF_error ("Content not allowed here"))
      )
# 1030 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_document_type]"

and scan_comment engine lexbuf = 
  match engine __ocaml_lex_tables 53 lexbuf with
      | 0 ->
# 337 "pxp_wlex_utf8_01.mll"
      ( fun lexid -> 
          Comment_end dummy_entity, lexid )
# 1040 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 340 "pxp_wlex_utf8_01.mll"
      ( fun lexid ->
          raise (WF_error "Double hyphens are illegal inside comments") )
# 1046 "pxp_wlex_utf8_01.ml"

  | 2 ->
# 343 "pxp_wlex_utf8_01.mll"
      ( fun lexid ->
          Comment_material "-", (Comment lexid) )
# 1052 "pxp_wlex_utf8_01.ml"

  | 3 ->
# 346 "pxp_wlex_utf8_01.mll"
      ( fun lexid ->
	  Comment_material(Lexing.lexeme lexbuf), (Comment lexid) )
# 1058 "pxp_wlex_utf8_01.ml"

  | 4 ->
# 349 "pxp_wlex_utf8_01.mll"
      ( fun lexid -> Eof, (Comment lexid) )
# 1063 "pxp_wlex_utf8_01.ml"

  | 5 ->
# 351 "pxp_wlex_utf8_01.mll"
      ( fun lexid -> raise Netconversion.Malformed_code )
# 1068 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_comment]"

and scan_declaration engine lexbuf = 
  match engine __ocaml_lex_tables 58 lexbuf with
      | 0 ->
# 360 "pxp_wlex_utf8_01.mll"
      ( tok_Ignore__Declaration )
# 1077 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 362 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
	(PERef (String.sub s 1 (String.length s - 2))), Declaration )
# 1083 "pxp_wlex_utf8_01.ml"

  | 2 ->
# 365 "pxp_wlex_utf8_01.mll"
      ( tok_Percent__Declaration )
# 1088 "pxp_wlex_utf8_01.ml"

  | 3 ->
# 367 "pxp_wlex_utf8_01.mll"
      ( raise(WF_error("References to general entities not allowed in DTDs")) )
# 1093 "pxp_wlex_utf8_01.ml"

  | 4 ->
# 369 "pxp_wlex_utf8_01.mll"
      ( Name (Lexing.lexeme lexbuf), Declaration )
# 1098 "pxp_wlex_utf8_01.ml"

  | 5 ->
# 371 "pxp_wlex_utf8_01.mll"
      ( Nametoken (Lexing.lexeme lexbuf), Declaration )
# 1103 "pxp_wlex_utf8_01.ml"

  | 6 ->
# 373 "pxp_wlex_utf8_01.mll"
      ( tok_Plus__Declaration )
# 1108 "pxp_wlex_utf8_01.ml"

  | 7 ->
# 375 "pxp_wlex_utf8_01.mll"
      ( tok_Star__Declaration )
# 1113 "pxp_wlex_utf8_01.ml"

  | 8 ->
# 377 "pxp_wlex_utf8_01.mll"
      ( tok_Bar__Declaration )
# 1118 "pxp_wlex_utf8_01.ml"

  | 9 ->
# 379 "pxp_wlex_utf8_01.mll"
      ( tok_Comma__Declaration )
# 1123 "pxp_wlex_utf8_01.ml"

  | 10 ->
# 381 "pxp_wlex_utf8_01.mll"
      ( tok_Qmark__Declaration )
# 1128 "pxp_wlex_utf8_01.ml"

  | 11 ->
# 383 "pxp_wlex_utf8_01.mll"
      ( tok_Lparen__Declaration )
# 1133 "pxp_wlex_utf8_01.ml"

  | 12 ->
# 385 "pxp_wlex_utf8_01.mll"
      ( tok_RparenPlus__Declaration )
# 1138 "pxp_wlex_utf8_01.ml"

  | 13 ->
# 387 "pxp_wlex_utf8_01.mll"
      ( tok_RparenStar__Declaration )
# 1143 "pxp_wlex_utf8_01.ml"

  | 14 ->
# 389 "pxp_wlex_utf8_01.mll"
      ( tok_RparenQmark__Declaration )
# 1148 "pxp_wlex_utf8_01.ml"

  | 15 ->
# 391 "pxp_wlex_utf8_01.mll"
      ( tok_Rparen__Declaration )
# 1153 "pxp_wlex_utf8_01.ml"

  | 16 ->
# 393 "pxp_wlex_utf8_01.mll"
      ( tok_Required__Declaration )
# 1158 "pxp_wlex_utf8_01.ml"

  | 17 ->
# 395 "pxp_wlex_utf8_01.mll"
      ( tok_Implied__Declaration )
# 1163 "pxp_wlex_utf8_01.ml"

  | 18 ->
# 397 "pxp_wlex_utf8_01.mll"
      ( tok_Fixed__Declaration )
# 1168 "pxp_wlex_utf8_01.ml"

  | 19 ->
# 399 "pxp_wlex_utf8_01.mll"
      ( tok_Pcdata__Declaration )
# 1173 "pxp_wlex_utf8_01.ml"

  | 20 ->
# 401 "pxp_wlex_utf8_01.mll"
      ( tok_Decl_element__Declaration )
# 1178 "pxp_wlex_utf8_01.ml"

  | 21 ->
# 403 "pxp_wlex_utf8_01.mll"
      ( tok_Decl_attlist__Declaration )
# 1183 "pxp_wlex_utf8_01.ml"

  | 22 ->
# 405 "pxp_wlex_utf8_01.mll"
      ( tok_Decl_entity__Declaration )
# 1188 "pxp_wlex_utf8_01.ml"

  | 23 ->
# 407 "pxp_wlex_utf8_01.mll"
      ( tok_Decl_notation__Declaration )
# 1193 "pxp_wlex_utf8_01.ml"

  | 24 ->
# 409 "pxp_wlex_utf8_01.mll"
      ( Comment_begin dummy_entity, (Comment Declaration) )
# 1198 "pxp_wlex_utf8_01.ml"

  | 25 ->
# 411 "pxp_wlex_utf8_01.mll"
      ( tok_Conditional_begin__Declaration )
# 1203 "pxp_wlex_utf8_01.ml"

  | 26 ->
# 413 "pxp_wlex_utf8_01.mll"
      ( tok_Conditional_end__Declaration )
# 1208 "pxp_wlex_utf8_01.ml"

  | 27 ->
# 415 "pxp_wlex_utf8_01.mll"
      ( tok_Conditional_body__Declaration )
# 1213 "pxp_wlex_utf8_01.ml"

  | 28 ->
# 417 "pxp_wlex_utf8_01.mll"
      ( (* Scan the rest of the processing instruction: *)
	match !lexerset.scan_pi_string lexbuf with
  	  None ->
	    raise (WF_error ("Illegal processing instruction"))
	| Some pi ->
	    scan_pi pi !lexerset.scan_xml_pi, Declaration
      )
# 1224 "pxp_wlex_utf8_01.ml"

  | 29 ->
# 425 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
        (* Check that characters are well-formed: *)
	ignore(!lexerset.scan_characters (Lexing.from_string s));
	(Unparsed_string (String.sub s 1 (String.length s - 2))), Declaration )
# 1232 "pxp_wlex_utf8_01.ml"

  | 30 ->
# 430 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error ("Cannot find the second quotation mark"))
      )
# 1238 "pxp_wlex_utf8_01.ml"

  | 31 ->
# 433 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
        (* Check that characters are well-formed: *)
	ignore(!lexerset.scan_characters (Lexing.from_string s));
	(Unparsed_string (String.sub s 1 (String.length s - 2))), Declaration )
# 1246 "pxp_wlex_utf8_01.ml"

  | 32 ->
# 438 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error ("Cannot find the second quotation mark"))
      )
# 1252 "pxp_wlex_utf8_01.ml"

  | 33 ->
# 441 "pxp_wlex_utf8_01.mll"
      ( tok_Decl_rangle__Declaration )
# 1257 "pxp_wlex_utf8_01.ml"

  | 34 ->
# 443 "pxp_wlex_utf8_01.mll"
      ( tok_Dtd_end__Document_type )
# 1262 "pxp_wlex_utf8_01.ml"

  | 35 ->
# 445 "pxp_wlex_utf8_01.mll"
      ( tok_Eof__Declaration )
# 1267 "pxp_wlex_utf8_01.ml"

  | 36 ->
# 447 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error "Declaration either malformed or not allowed in this context") 
      )
# 1273 "pxp_wlex_utf8_01.ml"

  | 37 ->
# 450 "pxp_wlex_utf8_01.mll"
      ( (* Nothing matches: If at least a valid character follows, raise
         * the exception that this character is not allowed here. Otherwise,
         * raise Malformed_code.
         *)
        !lexerset.scan_character lexbuf;
 	raise (WF_error("Illegal token or character"))
      )
# 1284 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_declaration]"

and scan_characters engine lexbuf = 
  match engine __ocaml_lex_tables 142 lexbuf with
      | 0 ->
# 466 "pxp_wlex_utf8_01.mll"
    ( () )
# 1293 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 468 "pxp_wlex_utf8_01.mll"
    ( () )
# 1298 "pxp_wlex_utf8_01.ml"

  | 2 ->
# 470 "pxp_wlex_utf8_01.mll"
    ( raise Netconversion.Malformed_code )
# 1303 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_characters]"

and scan_character engine lexbuf = 
  match engine __ocaml_lex_tables 144 lexbuf with
      | 0 ->
# 480 "pxp_wlex_utf8_01.mll"
    ( () )
# 1312 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 482 "pxp_wlex_utf8_01.mll"
    ( () )
# 1317 "pxp_wlex_utf8_01.ml"

  | 2 ->
# 484 "pxp_wlex_utf8_01.mll"
    ( raise Netconversion.Malformed_code )
# 1322 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_character]"

and scan_dtd_string engine lexbuf = 
  match engine __ocaml_lex_tables 145 lexbuf with
      | 0 ->
# 494 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
	PERef (String.sub s 1 (String.length s - 2)) )
# 1332 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 497 "pxp_wlex_utf8_01.mll"
      ( raise(WF_error("The character '%' must be written as '&#37;'")) )
# 1337 "pxp_wlex_utf8_01.ml"

  | 2 ->
# 499 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
	ERef (String.sub s 1 (String.length s - 2)) )
# 1343 "pxp_wlex_utf8_01.ml"

  | 3 ->
# 502 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
	CRef (int_of_string (String.sub s 2 (String.length s - 3))) )
# 1349 "pxp_wlex_utf8_01.ml"

  | 4 ->
# 505 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
	CRef (int_of_string ("0x" ^ String.sub s 3 (String.length s - 4))) )
# 1355 "pxp_wlex_utf8_01.ml"

  | 5 ->
# 508 "pxp_wlex_utf8_01.mll"
      ( raise(WF_error("The character '&' must be written as '&amp;'")) )
# 1360 "pxp_wlex_utf8_01.ml"

  | 6 ->
# 510 "pxp_wlex_utf8_01.mll"
      ( CRef(-1) )
# 1365 "pxp_wlex_utf8_01.ml"

  | 7 ->
# 512 "pxp_wlex_utf8_01.mll"
      ( CRef(-2) )
# 1370 "pxp_wlex_utf8_01.ml"

  | 8 ->
# 514 "pxp_wlex_utf8_01.mll"
      ( CRef(-3) )
# 1375 "pxp_wlex_utf8_01.ml"

  | 9 ->
# 516 "pxp_wlex_utf8_01.mll"
      ( tok_CharDataTAB )
# 1380 "pxp_wlex_utf8_01.ml"

  | 10 ->
# 518 "pxp_wlex_utf8_01.mll"
      ( CharData (Lexing.lexeme lexbuf) )
# 1385 "pxp_wlex_utf8_01.ml"

  | 11 ->
# 520 "pxp_wlex_utf8_01.mll"
      ( Eof )
# 1390 "pxp_wlex_utf8_01.ml"

  | 12 ->
# 522 "pxp_wlex_utf8_01.mll"
      ( raise Netconversion.Malformed_code )
# 1395 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_dtd_string]"

and scan_content engine lexbuf = 
  match engine __ocaml_lex_tables 156 lexbuf with
      | 0 ->
# 530 "pxp_wlex_utf8_01.mll"
      ( (* Scan the rest of the processing instruction: *)
	match !lexerset.scan_pi_string lexbuf with
  	  None ->
	    raise (WF_error ("Illegal processing instruction"))
	| Some pi ->
	    scan_pi pi !lexerset.scan_xml_pi, Content
      )
# 1410 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 538 "pxp_wlex_utf8_01.mll"
      ( Comment_begin dummy_entity, (Comment Content) )
# 1415 "pxp_wlex_utf8_01.ml"

  | 2 ->
# 541 "pxp_wlex_utf8_01.mll"
      ( let l = Pxp_lexing.lexeme_len lexbuf in
	if Lexing.lexeme_char lexbuf 1 = '/' then
	  Tag_end (Pxp_lexing.sub_lexeme lexbuf 2 (l-2), dummy_entity), 
	  Within_tag_entry
	else
	  Tag_beg (Pxp_lexing.sub_lexeme lexbuf 1 (l-1), dummy_entity), 
	  Within_tag_entry
      )
# 1427 "pxp_wlex_utf8_01.ml"

  | 3 ->
# 550 "pxp_wlex_utf8_01.mll"
      ( let l = Pxp_lexing.lexeme_len lexbuf in
	Cdata (Pxp_lexing.sub_lexeme lexbuf 9 (l-12)), Content )
# 1433 "pxp_wlex_utf8_01.ml"

  | 4 ->
# 553 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error "Declaration either malformed or not allowed in this context") 
      )
# 1439 "pxp_wlex_utf8_01.ml"

  | 5 ->
# 556 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error ("The left angle bracket '<' must be written as '&lt;'"))
      )
# 1445 "pxp_wlex_utf8_01.ml"

  | 6 ->
# 559 "pxp_wlex_utf8_01.mll"
      ( let l = Pxp_lexing.lexeme_len lexbuf in
	CRef (int_of_string (Pxp_lexing.sub_lexeme lexbuf 2 (l-3))), Content )
# 1451 "pxp_wlex_utf8_01.ml"

  | 7 ->
# 562 "pxp_wlex_utf8_01.mll"
      ( let l = Pxp_lexing.lexeme_len lexbuf in
	CRef (int_of_string ("0x" ^ Pxp_lexing.sub_lexeme lexbuf 3 (l-4))), Content )
# 1457 "pxp_wlex_utf8_01.ml"

  | 8 ->
# 565 "pxp_wlex_utf8_01.mll"
      ( let l = Pxp_lexing.lexeme_len lexbuf in
	ERef (Pxp_lexing.sub_lexeme lexbuf 1 (l-2)), Content )
# 1463 "pxp_wlex_utf8_01.ml"

  | 9 ->
# 568 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error ("The ampersand '&' must be written as '&amp;'"))
      )
# 1469 "pxp_wlex_utf8_01.ml"

  | 10 ->
# 571 "pxp_wlex_utf8_01.mll"
      ( tok_LLcurly__Content )
# 1474 "pxp_wlex_utf8_01.ml"

  | 11 ->
# 573 "pxp_wlex_utf8_01.mll"
      ( tok_RRcurly__Content )
# 1479 "pxp_wlex_utf8_01.ml"

  | 12 ->
# 575 "pxp_wlex_utf8_01.mll"
      ( tok_Lcurly__Content )
# 1484 "pxp_wlex_utf8_01.ml"

  | 13 ->
# 577 "pxp_wlex_utf8_01.mll"
      ( tok_Rcurly__Content )
# 1489 "pxp_wlex_utf8_01.ml"

  | 14 ->
# 587 "pxp_wlex_utf8_01.mll"
      ( tok_LineEndCRLF__Content )
# 1494 "pxp_wlex_utf8_01.ml"

  | 15 ->
# 589 "pxp_wlex_utf8_01.mll"
      ( tok_LineEndCR__Content )
# 1499 "pxp_wlex_utf8_01.ml"

  | 16 ->
# 591 "pxp_wlex_utf8_01.mll"
      ( tok_LineEndLF__Content )
# 1504 "pxp_wlex_utf8_01.ml"

  | 17 ->
# 593 "pxp_wlex_utf8_01.mll"
      ( tok_CharDataTAB__Content )
# 1509 "pxp_wlex_utf8_01.ml"

  | 18 ->
# 595 "pxp_wlex_utf8_01.mll"
      ( tok_Eof__Content )
# 1514 "pxp_wlex_utf8_01.ml"

  | 19 ->
# 597 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error ("The sequence ']]>' must be written as ']]&gt;'"))
      )
# 1520 "pxp_wlex_utf8_01.ml"

  | 20 ->
# 600 "pxp_wlex_utf8_01.mll"
      ( tok_CharDataRBRACKET__Content )
# 1525 "pxp_wlex_utf8_01.ml"

  | 21 ->
# 602 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
	CharData s, Content 
      )
# 1532 "pxp_wlex_utf8_01.ml"

  | 22 ->
# 606 "pxp_wlex_utf8_01.mll"
      ( raise Netconversion.Malformed_code )
# 1537 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_content]"

and scan_within_tag engine lexbuf = 
  match engine __ocaml_lex_tables 185 lexbuf with
      | 0 ->
# 614 "pxp_wlex_utf8_01.mll"
      ( tok_IgnoreLineEnd__Within_tag )
# 1546 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 616 "pxp_wlex_utf8_01.mll"
      ( tok_IgnoreLineEnd__Within_tag )
# 1551 "pxp_wlex_utf8_01.ml"

  | 2 ->
# 618 "pxp_wlex_utf8_01.mll"
      ( tok_IgnoreLineEnd__Within_tag )
# 1556 "pxp_wlex_utf8_01.ml"

  | 3 ->
# 620 "pxp_wlex_utf8_01.mll"
      ( tok_Ignore__Within_tag )
# 1561 "pxp_wlex_utf8_01.ml"

  | 4 ->
# 622 "pxp_wlex_utf8_01.mll"
      ( Name (Lexing.lexeme lexbuf ), Within_tag )
# 1566 "pxp_wlex_utf8_01.ml"

  | 5 ->
# 624 "pxp_wlex_utf8_01.mll"
      ( tok_Eq__Within_tag )
# 1571 "pxp_wlex_utf8_01.ml"

  | 6 ->
# 626 "pxp_wlex_utf8_01.mll"
      ( let l = Pxp_lexing.lexeme_len lexbuf in
	let v = Pxp_lexing.sub_lexeme lexbuf 1 (l-2) in
	Attval v, Within_tag )
# 1578 "pxp_wlex_utf8_01.ml"

  | 7 ->
# 630 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error ("Cannot find the second quotation mark"))
      )
# 1584 "pxp_wlex_utf8_01.ml"

  | 8 ->
# 633 "pxp_wlex_utf8_01.mll"
      ( let l = Pxp_lexing.lexeme_len lexbuf in
	let v = Pxp_lexing.sub_lexeme lexbuf 1 (l-2) in
	Attval v, Within_tag )
# 1591 "pxp_wlex_utf8_01.ml"

  | 9 ->
# 637 "pxp_wlex_utf8_01.mll"
      ( raise (WF_error ("Cannot find the second quotation mark"))
      )
# 1597 "pxp_wlex_utf8_01.ml"

  | 10 ->
# 640 "pxp_wlex_utf8_01.mll"
      ( tok_Rangle__Content )
# 1602 "pxp_wlex_utf8_01.ml"

  | 11 ->
# 642 "pxp_wlex_utf8_01.mll"
      ( tok_Rangle_empty__Content )
# 1607 "pxp_wlex_utf8_01.ml"

  | 12 ->
# 644 "pxp_wlex_utf8_01.mll"
      ( tok_Eof__Within_tag )
# 1612 "pxp_wlex_utf8_01.ml"

  | 13 ->
# 646 "pxp_wlex_utf8_01.mll"
      ( (* Nothing matches: If at least a valid character follows, raise
         * the exception that this character is not allowed here. Otherwise,
         * raise Malformed_code.
         *)
        !lexerset.scan_character lexbuf;
 	raise (WF_error ("Illegal inside tags"))
      )
# 1623 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_within_tag]"

and scan_tag_eb engine lexbuf = 
  match engine __ocaml_lex_tables 194 lexbuf with
      | 0 ->
# 663 "pxp_wlex_utf8_01.mll"
      ( tok_IgnoreLineEnd__Tag_eb )
# 1632 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 665 "pxp_wlex_utf8_01.mll"
      ( tok_IgnoreLineEnd__Tag_eb )
# 1637 "pxp_wlex_utf8_01.ml"

  | 2 ->
# 667 "pxp_wlex_utf8_01.mll"
      ( tok_IgnoreLineEnd__Tag_eb )
# 1642 "pxp_wlex_utf8_01.ml"

  | 3 ->
# 669 "pxp_wlex_utf8_01.mll"
      ( tok_Ignore__Tag_eb )
# 1647 "pxp_wlex_utf8_01.ml"

  | 4 ->
# 671 "pxp_wlex_utf8_01.mll"
      ( Name (Lexing.lexeme lexbuf ), Tag_eb )
# 1652 "pxp_wlex_utf8_01.ml"

  | 5 ->
# 673 "pxp_wlex_utf8_01.mll"
      ( tok_Eq__Tag_eb )
# 1657 "pxp_wlex_utf8_01.ml"

  | 6 ->
# 675 "pxp_wlex_utf8_01.mll"
      ( tok_DQuote__Tag_eb_att_true )
# 1662 "pxp_wlex_utf8_01.ml"

  | 7 ->
# 677 "pxp_wlex_utf8_01.mll"
      ( tok_SQuote__Tag_eb_att_false )
# 1667 "pxp_wlex_utf8_01.ml"

  | 8 ->
# 679 "pxp_wlex_utf8_01.mll"
      ( tok_Rangle__Content )
# 1672 "pxp_wlex_utf8_01.ml"

  | 9 ->
# 681 "pxp_wlex_utf8_01.mll"
      ( tok_Rangle_empty__Content )
# 1677 "pxp_wlex_utf8_01.ml"

  | 10 ->
# 683 "pxp_wlex_utf8_01.mll"
      ( tok_Eof__Tag_eb )
# 1682 "pxp_wlex_utf8_01.ml"

  | 11 ->
# 685 "pxp_wlex_utf8_01.mll"
      ( (* Nothing matches: If at least a valid character follows, raise
         * the exception that this character is not allowed here. Otherwise,
         * raise Malformed_code.
         *)
        !lexerset.scan_character lexbuf;
 	raise (WF_error ("Illegal inside tags"))
      )
# 1693 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_tag_eb]"

and scan_content_string engine lexbuf = 
  match engine __ocaml_lex_tables 199 lexbuf with
      | 0 ->
# 701 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
	ERef (String.sub s 1 (String.length s - 2)) )
# 1703 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 704 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
	CRef (int_of_string (String.sub s 2 (String.length s - 3))) )
# 1709 "pxp_wlex_utf8_01.ml"

  | 2 ->
# 707 "pxp_wlex_utf8_01.mll"
      ( let s = Lexing.lexeme lexbuf in
	CRef (int_of_string ("0x" ^ String.sub s 3 (String.length s - 4))) )
# 1715 "pxp_wlex_utf8_01.ml"

  | 3 ->
# 710 "pxp_wlex_utf8_01.mll"
      ( raise(WF_error("The character '&' must be written as '&amp;'")) )
# 1720 "pxp_wlex_utf8_01.ml"

  | 4 ->
# 712 "pxp_wlex_utf8_01.mll"
      ( CharData ""  (* TODO *) (* (Lexing.lexeme lexbuf) *) )
# 1725 "pxp_wlex_utf8_01.ml"

  | 5 ->
# 714 "pxp_wlex_utf8_01.mll"
      ( CRef 32 )
# 1730 "pxp_wlex_utf8_01.ml"

  | 6 ->
# 716 "pxp_wlex_utf8_01.mll"
      ( CRef(-1)   (* A special case *)
      )
# 1736 "pxp_wlex_utf8_01.ml"

  | 7 ->
# 719 "pxp_wlex_utf8_01.mll"
      ( CRef 32 )
# 1741 "pxp_wlex_utf8_01.ml"

  | 8 ->
# 721 "pxp_wlex_utf8_01.mll"
      ( CRef 32 )
# 1746 "pxp_wlex_utf8_01.ml"

  | 9 ->
# 723 "pxp_wlex_utf8_01.mll"
      ( 
	(* Depending on the situation, '<' may be legal or not: *)
	tok_CharDataLT
      )
# 1754 "pxp_wlex_utf8_01.ml"

  | 10 ->
# 728 "pxp_wlex_utf8_01.mll"
      ( Eof )
# 1759 "pxp_wlex_utf8_01.ml"

  | 11 ->
# 730 "pxp_wlex_utf8_01.mll"
      ( raise Netconversion.Malformed_code )
# 1764 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_content_string]"

and scan_tag_eb_att engine lexbuf = 
  match engine __ocaml_lex_tables 208 lexbuf with
      | 0 ->
# 743 "pxp_wlex_utf8_01.mll"
      ( fun d ->
	  let s = Lexing.lexeme lexbuf in
	  (ERef_att (String.sub s 1 (String.length s - 2)), Tag_eb_att d) 
      )
# 1776 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 748 "pxp_wlex_utf8_01.mll"
      ( fun d ->
	  let s = Lexing.lexeme lexbuf in
	  (CRef (int_of_string (String.sub s 2 (String.length s - 3))),
	   Tag_eb_att d)
      )
# 1785 "pxp_wlex_utf8_01.ml"

  | 2 ->
# 754 "pxp_wlex_utf8_01.mll"
      ( fun d ->
	  let s = Lexing.lexeme lexbuf in
	  (CRef (int_of_string ("0x" ^ String.sub s 3 (String.length s - 4))),
	   Tag_eb_att d)
      )
# 1794 "pxp_wlex_utf8_01.ml"

  | 3 ->
# 760 "pxp_wlex_utf8_01.mll"
      ( fun _ ->
          raise(WF_error("The character '&' must be written as '&amp;'")) )
# 1800 "pxp_wlex_utf8_01.ml"

  | 4 ->
# 763 "pxp_wlex_utf8_01.mll"
      ( fun d ->
          tok_CharDataSPACE, Tag_eb_att d )
# 1806 "pxp_wlex_utf8_01.ml"

  | 5 ->
# 766 "pxp_wlex_utf8_01.mll"
      ( fun d ->
	  LineEnd_att "  ", Tag_eb_att d )
# 1812 "pxp_wlex_utf8_01.ml"

  | 6 ->
# 769 "pxp_wlex_utf8_01.mll"
      ( fun d ->
          LineEnd_att " ", Tag_eb_att d )
# 1818 "pxp_wlex_utf8_01.ml"

  | 7 ->
# 772 "pxp_wlex_utf8_01.mll"
      ( fun d ->
          LineEnd_att " ", Tag_eb_att d )
# 1824 "pxp_wlex_utf8_01.ml"

  | 8 ->
# 775 "pxp_wlex_utf8_01.mll"
      ( fun d ->
	  (* Depending on the situation, '<' may be legal or not: *)
	  tok_CharDataLT, Tag_eb_att d
      )
# 1832 "pxp_wlex_utf8_01.ml"

  | 9 ->
# 780 "pxp_wlex_utf8_01.mll"
      ( function
          true  -> DQuote, Tag_eb
        | false -> tok_CharDataQUOT, Tag_eb_att false
      )
# 1840 "pxp_wlex_utf8_01.ml"

  | 10 ->
# 785 "pxp_wlex_utf8_01.mll"
      ( function
          true  -> tok_CharDataAPOS, Tag_eb_att true
        | false -> SQuote, Tag_eb
      )
# 1848 "pxp_wlex_utf8_01.ml"

  | 11 ->
# 790 "pxp_wlex_utf8_01.mll"
      ( fun d -> LLcurly, Tag_eb_att d )
# 1853 "pxp_wlex_utf8_01.ml"

  | 12 ->
# 792 "pxp_wlex_utf8_01.mll"
      ( fun d -> Lcurly, Tag_eb_att d )
# 1858 "pxp_wlex_utf8_01.ml"

  | 13 ->
# 794 "pxp_wlex_utf8_01.mll"
      ( fun d -> RRcurly, Tag_eb_att d )
# 1863 "pxp_wlex_utf8_01.ml"

  | 14 ->
# 796 "pxp_wlex_utf8_01.mll"
      ( fun d -> Rcurly, Tag_eb_att d )
# 1868 "pxp_wlex_utf8_01.ml"

  | 15 ->
# 798 "pxp_wlex_utf8_01.mll"
      ( fun d -> CharData (Lexing.lexeme lexbuf), Tag_eb_att d )
# 1873 "pxp_wlex_utf8_01.ml"

  | 16 ->
# 800 "pxp_wlex_utf8_01.mll"
      ( fun d -> Eof, Tag_eb_att d )
# 1878 "pxp_wlex_utf8_01.ml"

  | 17 ->
# 802 "pxp_wlex_utf8_01.mll"
      ( fun _ -> raise Netconversion.Malformed_code )
# 1883 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_tag_eb_att]"

and scan_name_string engine lexbuf = 
  match engine __ocaml_lex_tables 219 lexbuf with
      | 0 ->
# 812 "pxp_wlex_utf8_01.mll"
      ( Name (Lexing.lexeme lexbuf) )
# 1892 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 814 "pxp_wlex_utf8_01.mll"
      ( Ignore )
# 1897 "pxp_wlex_utf8_01.ml"

  | 2 ->
# 816 "pxp_wlex_utf8_01.mll"
      ( Nametoken (Lexing.lexeme lexbuf) )
# 1902 "pxp_wlex_utf8_01.ml"

  | 3 ->
# 818 "pxp_wlex_utf8_01.mll"
      ( Eof )
# 1907 "pxp_wlex_utf8_01.ml"

  | 4 ->
# 820 "pxp_wlex_utf8_01.mll"
      ( CharData (Lexing.lexeme lexbuf) )
# 1912 "pxp_wlex_utf8_01.ml"

  | 5 ->
# 822 "pxp_wlex_utf8_01.mll"
      ( raise Netconversion.Malformed_code )
# 1917 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_name_string]"

and scan_ignored_section engine lexbuf = 
  match engine __ocaml_lex_tables 223 lexbuf with
      | 0 ->
# 830 "pxp_wlex_utf8_01.mll"
      ( tok_Conditional_begin__Ignored )
# 1926 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 832 "pxp_wlex_utf8_01.mll"
      ( tok_Conditional_end__Ignored )
# 1931 "pxp_wlex_utf8_01.ml"

  | 2 ->
# 834 "pxp_wlex_utf8_01.mll"
      ( tok_Ignore__Ignored )
# 1936 "pxp_wlex_utf8_01.ml"

  | 3 ->
# 836 "pxp_wlex_utf8_01.mll"
      ( tok_Ignore__Ignored )
# 1941 "pxp_wlex_utf8_01.ml"

  | 4 ->
# 838 "pxp_wlex_utf8_01.mll"
      ( tok_Ignore__Ignored )
# 1946 "pxp_wlex_utf8_01.ml"

  | 5 ->
# 840 "pxp_wlex_utf8_01.mll"
      ( tok_Eof__Ignored )
# 1951 "pxp_wlex_utf8_01.ml"

  | 6 ->
# 842 "pxp_wlex_utf8_01.mll"
      ( tok_Ignore__Ignored )
# 1956 "pxp_wlex_utf8_01.ml"

  | 7 ->
# 844 "pxp_wlex_utf8_01.mll"
      ( tok_Ignore__Ignored )
# 1961 "pxp_wlex_utf8_01.ml"

  | 8 ->
# 846 "pxp_wlex_utf8_01.mll"
      ( tok_Ignore__Ignored )
# 1966 "pxp_wlex_utf8_01.ml"

  | 9 ->
# 848 "pxp_wlex_utf8_01.mll"
      ( tok_Ignore__Ignored )
# 1971 "pxp_wlex_utf8_01.ml"

  | 10 ->
# 850 "pxp_wlex_utf8_01.mll"
      ( tok_Ignore__Ignored )
# 1976 "pxp_wlex_utf8_01.ml"

  | 11 ->
# 852 "pxp_wlex_utf8_01.mll"
      ( raise Netconversion.Malformed_code )
# 1981 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_ignored_section]"

and scan_for_crlf engine lexbuf = 
  match engine __ocaml_lex_tables 238 lexbuf with
      | 0 ->
# 860 "pxp_wlex_utf8_01.mll"
      ( tok_CharDataLF )
# 1990 "pxp_wlex_utf8_01.ml"

  | 1 ->
# 862 "pxp_wlex_utf8_01.mll"
      ( tok_CharDataLF )
# 1995 "pxp_wlex_utf8_01.ml"

  | 2 ->
# 864 "pxp_wlex_utf8_01.mll"
      ( tok_CharDataLF )
# 2000 "pxp_wlex_utf8_01.ml"

  | 3 ->
# 866 "pxp_wlex_utf8_01.mll"
      ( CharData (Lexing.lexeme lexbuf) )
# 2005 "pxp_wlex_utf8_01.ml"

  | 4 ->
# 868 "pxp_wlex_utf8_01.mll"
      ( Eof )
# 2010 "pxp_wlex_utf8_01.ml"

  | _ -> failwith "lexing: empty token [scan_for_crlf]"

;;

