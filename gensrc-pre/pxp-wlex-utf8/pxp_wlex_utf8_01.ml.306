let eof = 0
let invalid = 1
let unicode_baseChar = 2
let ideographic = 3
let extender = 4
let ascii_digit = 5
let unicode_digit = 6
let combiningChar = 7
let otherChar = 8
let char_41 = 9
let char_42 = 10
let char_43 = 11
let char_44 = 12
let char_45 = 13
let char_46 = 14
let char_47 = 15
let char_48 = 16
let char_49 = 17
let char_4a = 18
let char_4b = 19
let char_4c = 20
let char_4d = 21
let char_4e = 22
let char_4f = 23
let char_50 = 24
let char_51 = 25
let char_52 = 26
let char_53 = 27
let char_54 = 28
let char_55 = 29
let char_56 = 30
let char_57 = 31
let char_58 = 32
let char_59 = 33
let char_5a = 34
let char_61 = 35
let char_62 = 36
let char_63 = 37
let char_64 = 38
let char_65 = 39
let char_66 = 40
let char_67 = 41
let char_68 = 42
let char_69 = 43
let char_6a = 44
let char_6b = 45
let char_6c = 46
let char_6d = 47
let char_6e = 48
let char_6f = 49
let char_70 = 50
let char_71 = 51
let char_72 = 52
let char_73 = 53
let char_74 = 54
let char_75 = 55
let char_76 = 56
let char_77 = 57
let char_78 = 58
let char_79 = 59
let char_7a = 60
let char_3c = 61
let char_3e = 62
let char_3f = 63
let char_21 = 64
let char_2d = 65
let char_2f = 66
let char_5b = 67
let char_5d = 68
let char_26 = 69
let char_23 = 70
let char_3b = 71
let char_25 = 72
let char_2b = 73
let char_2a = 74
let char_7c = 75
let char_2c = 76
let char_28 = 77
let char_29 = 78
let char_27 = 79
let char_3d = 80
let char_2e = 81
let char_3a = 82
let char_5f = 83
let char_7b = 84
let char_7d = 85
let char_22 = 86
let char_0a = 87
let char_0d = 88
let char_09 = 89
let char_20 = 90

let one_char_classes = [
  (0x41, 09);
  (0x42, 10);
  (0x43, 11);
  (0x44, 12);
  (0x45, 13);
  (0x46, 14);
  (0x47, 15);
  (0x48, 16);
  (0x49, 17);
  (0x4a, 18);
  (0x4b, 19);
  (0x4c, 20);
  (0x4d, 21);
  (0x4e, 22);
  (0x4f, 23);
  (0x50, 24);
  (0x51, 25);
  (0x52, 26);
  (0x53, 27);
  (0x54, 28);
  (0x55, 29);
  (0x56, 30);
  (0x57, 31);
  (0x58, 32);
  (0x59, 33);
  (0x5a, 34);
  (0x61, 35);
  (0x62, 36);
  (0x63, 37);
  (0x64, 38);
  (0x65, 39);
  (0x66, 40);
  (0x67, 41);
  (0x68, 42);
  (0x69, 43);
  (0x6a, 44);
  (0x6b, 45);
  (0x6c, 46);
  (0x6d, 47);
  (0x6e, 48);
  (0x6f, 49);
  (0x70, 50);
  (0x71, 51);
  (0x72, 52);
  (0x73, 53);
  (0x74, 54);
  (0x75, 55);
  (0x76, 56);
  (0x77, 57);
  (0x78, 58);
  (0x79, 59);
  (0x7a, 60);
  (0x3c, 61);
  (0x3e, 62);
  (0x3f, 63);
  (0x21, 64);
  (0x2d, 65);
  (0x2f, 66);
  (0x5b, 67);
  (0x5d, 68);
  (0x26, 69);
  (0x23, 70);
  (0x3b, 71);
  (0x25, 72);
  (0x2b, 73);
  (0x2a, 74);
  (0x7c, 75);
  (0x2c, 76);
  (0x28, 77);
  (0x29, 78);
  (0x27, 79);
  (0x3d, 80);
  (0x2e, 81);
  (0x3a, 82);
  (0x5f, 83);
  (0x7b, 84);
  (0x7d, 85);
  (0x22, 86);
  (0x0a, 87);
  (0x0d, 88);
  (0x09, 89);
  (0x20, 90);
 ]

let nb_classes = 91

# 40 "pxp_wlex_utf8_01.mll"
 
  open Pxp_types
  open Pxp_lexer_types
  open Pxp_lex_aux
    (* Hint: All the tok_* values are declared here *)

  let lexerset = ref (Pxp_lexers.dummy_lexer_set) ;;
    (* Every lexer module knows its lexerset, so it can call
     * all other lexer modules by !lexerset.name_of_lexer 
     *)
let lex_tables = {
  Lexing.lex_base = 
   "\000\000\000\000\003\000\024\000\094\000\021\000\124\000\005\000\
    \012\000\034\000\049\000\215\000\245\000\058\000\011\001\081\001\
    \176\000\017\000\251\255\020\000\253\255\009\000\255\255\250\255\
    \244\255\041\001\033\000\041\000\036\000\030\000\040\000\252\255\
    \056\000\000\000\254\255\074\000\055\000\142\000\152\000\018\001\
    \078\000\111\001\252\255\250\255\132\001\173\001\251\255\061\000\
    \137\000\223\001\008\002\239\255\238\255\048\002\247\255\099\002\
    \245\255\060\000\069\000\246\255\248\255\119\000\251\255\242\255\
    \130\002\213\000\000\001\109\002\216\002\181\002\245\255\211\002\
    \246\255\240\002\247\255\141\000\249\255\017\003\079\001\105\001\
    \103\003\113\003\075\003\245\255\129\003\247\255\167\000\248\255\
    \143\000\142\000\246\255\243\255\159\003\171\000\013\001\007\001\
    \147\000\146\000\103\001\105\001\237\255\233\255\210\003\250\003\
    \170\000\024\004\155\000\155\000\239\255\154\000\238\255\241\255\
    \115\004\117\001\109\001\115\004\125\004\180\000\236\255\148\004\
    \189\000\239\004\178\000\003\000\003\000\007\000\000\000\009\000\
    \180\000\115\001\117\001\123\001\213\001\186\001\197\004\244\255\
    \099\003\013\005\104\005\247\255\161\000\246\255\134\005\225\005\
    \120\001\121\001\108\005\235\005\163\005\254\255\255\255\025\000\
    \032\000\220\255\255\005\090\006\194\000\222\255\228\255\191\000\
    \028\000\120\006\056\001\136\001\091\001\138\001\182\001\226\255\
    \188\001\224\255\211\006\002\000\002\000\016\000\016\000\013\000\
    \010\000\026\000\018\000\033\000\035\000\239\255\036\000\042\000\
    \025\000\046\000\036\000\240\000\248\000\253\000\004\001\241\000\
    \081\001\089\001\237\255\045\001\229\255\227\255\001\002\080\001\
    \119\001\090\001\056\001\230\255\231\255\100\001\122\001\106\001\
    \118\001\115\001\141\001\232\255\151\001\201\001\213\001\204\001\
    \200\001\217\001\242\001\234\001\241\001\235\255\243\001\253\001\
    \001\002\249\001\249\001\234\255\026\002\213\001\218\001\059\002\
    \241\006\061\002\064\002\023\002\151\002\153\002\076\007\068\002\
    \106\007\051\002\009\002\241\001\047\002\039\002\040\002\065\002\
    \077\002\197\007\019\003\146\002\033\003\035\003\174\002\195\002\
    \066\003\206\002\044\003\067\003\223\002\110\003\177\003\179\003\
    \013\004\038\002\044\002\061\002\069\002\172\003\176\003";
  Lexing.lex_backtrk = 
   "\001\000\001\000\007\000\008\000\011\000\255\255\037\000\000\000\
    \255\255\255\255\255\255\013\000\011\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\003\000\255\255\001\000\255\255\255\255\
    \255\255\006\000\007\000\008\000\009\000\010\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\006\000\255\255\255\255\000\000\002\000\255\255\001\000\
    \001\000\002\000\000\000\255\255\255\255\015\000\255\255\003\000\
    \255\255\012\000\014\000\255\255\255\255\006\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\015\000\255\255\004\000\
    \255\255\003\000\255\255\007\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\004\000\255\255\004\000\255\255\255\255\255\255\
    \001\000\003\000\255\255\255\255\004\000\255\255\009\000\007\000\
    \001\000\003\000\255\255\255\255\255\255\255\255\021\000\005\000\
    \020\000\009\000\012\000\013\000\255\255\015\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\
    \004\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\021\000\255\255\
    \010\000\005\000\001\000\255\255\007\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\010\000\255\255\255\255\000\000\
    \000\000\255\255\004\000\005\000\255\255\255\255\255\255\034\000\
    \255\255\002\000\015\000\032\000\030\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\036\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\003\000\002\000\001\000\003\000\
    \000\000\005\000\003\000\001\000\255\255\255\255\005\000\006\000\
    \004\000\003\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\003\000\001\000\005\000\255\255\255\255\004\000\
    \255\255\255\255\002\000\000\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000";
  Lexing.lex_default = 
   "\255\255\004\001\249\000\255\255\232\000\228\000\154\000\151\000\
    \150\000\136\000\102\000\092\000\084\000\071\000\053\000\044\000\
    \025\000\019\000\000\000\019\000\000\000\255\255\000\000\000\000\
    \000\000\041\000\255\255\255\255\032\000\030\000\030\000\000\000\
    \032\000\255\255\000\000\255\255\255\255\037\000\039\000\039\000\
    \255\255\041\000\000\000\000\000\050\000\049\000\000\000\255\255\
    \255\255\049\000\050\000\000\000\000\000\069\000\000\000\064\000\
    \000\000\255\255\255\255\000\000\000\000\255\255\000\000\000\000\
    \064\000\255\255\255\255\255\255\255\255\069\000\000\000\082\000\
    \000\000\077\000\000\000\255\255\000\000\077\000\255\255\255\255\
    \255\255\255\255\082\000\000\000\084\000\000\000\255\255\000\000\
    \255\255\255\255\000\000\000\000\092\000\255\255\099\000\098\000\
    \255\255\255\255\098\000\099\000\000\000\000\000\134\000\119\000\
    \255\255\112\000\255\255\255\255\000\000\255\255\000\000\000\000\
    \112\000\255\255\255\255\255\255\255\255\255\255\000\000\119\000\
    \255\255\119\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\129\000\131\000\131\000\133\000\133\000\134\000\000\000\
    \148\000\143\000\142\000\000\000\255\255\000\000\142\000\143\000\
    \255\255\255\255\255\255\255\255\148\000\000\000\000\000\152\000\
    \152\000\000\000\154\000\155\000\255\255\000\000\000\000\255\255\
    \255\255\170\000\255\255\168\000\166\000\255\255\166\000\000\000\
    \168\000\000\000\170\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\231\000\255\255\255\255\231\000\
    \232\000\237\000\236\000\255\255\236\000\237\000\240\000\255\255\
    \240\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\249\000\000\001\255\255\253\000\253\000\255\255\255\255\
    \000\001\255\255\255\255\255\255\004\001\006\001\006\001\006\001\
    \006\001\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_trans = 
   "\255\255\255\255\000\000\076\000\255\255\149\000\020\000\255\255\
    \255\255\255\255\255\255\255\255\149\000\020\000\124\000\125\000\
    \126\000\018\000\128\000\191\000\255\255\046\000\043\000\186\000\
    \087\000\255\255\255\255\182\000\127\000\175\000\255\255\255\255\
    \255\255\255\255\135\000\091\000\255\255\255\255\176\000\177\000\
    \255\255\255\255\171\000\178\000\179\000\172\000\180\000\181\000\
    \183\000\100\000\101\000\184\000\173\000\185\000\174\000\118\000\
    \255\255\255\255\070\000\024\000\187\000\009\001\034\000\005\001\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\250\000\251\000\255\255\238\000\229\000\255\255\
    \255\255\252\000\255\255\255\255\255\255\255\255\085\000\255\255\
    \022\000\035\000\255\255\255\255\255\255\255\255\255\255\137\000\
    \020\000\021\000\138\000\255\255\255\255\033\000\103\000\239\000\
    \239\000\239\000\239\000\018\000\031\000\104\000\105\000\072\000\
    \037\000\139\000\140\000\141\000\153\000\255\255\031\000\073\000\
    \155\000\155\000\155\000\155\000\255\255\106\000\107\000\018\000\
    \108\000\109\000\110\000\036\000\020\000\022\000\255\255\255\255\
    \024\000\074\000\075\000\023\000\048\000\048\000\048\000\048\000\
    \255\255\255\255\063\000\255\255\087\000\255\255\255\255\255\255\
    \255\255\076\000\255\255\090\000\255\255\255\255\083\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\233\000\255\255\255\255\
    \023\000\024\000\255\255\255\255\234\000\235\000\235\000\235\000\
    \235\000\156\000\157\000\083\000\255\255\155\000\255\255\158\000\
    \159\000\031\000\160\000\255\255\161\000\076\000\087\000\085\000\
    \090\000\024\000\162\000\163\000\255\255\155\000\043\000\038\000\
    \255\255\255\255\164\000\165\000\165\000\165\000\165\000\091\000\
    \255\255\040\000\066\000\255\255\255\255\255\255\255\255\255\255\
    \048\000\048\000\048\000\048\000\076\000\090\000\022\000\089\000\
    \089\000\024\000\022\000\097\000\097\000\026\000\117\000\083\000\
    \024\000\111\000\118\000\034\000\027\000\083\000\255\255\129\000\
    \076\000\255\255\255\255\255\255\255\255\255\255\122\000\028\000\
    \123\000\197\000\198\000\195\000\188\000\066\000\029\000\255\255\
    \255\255\189\000\190\000\051\000\052\000\255\255\255\255\067\000\
    \052\000\192\000\255\255\255\255\255\255\083\000\255\255\255\255\
    \255\255\093\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\094\000\043\000\
    \255\255\255\255\255\255\255\255\255\255\095\000\020\000\096\000\
    \097\000\097\000\255\255\085\000\255\255\255\255\255\255\086\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\087\000\043\000\255\255\034\000\
    \054\000\255\255\255\255\076\000\020\000\088\000\089\000\089\000\
    \055\000\042\000\043\000\038\000\079\000\045\000\045\000\045\000\
    \045\000\046\000\056\000\255\255\085\000\076\000\193\000\057\000\
    \058\000\059\000\060\000\061\000\062\000\194\000\255\255\255\255\
    \255\255\255\255\255\255\196\000\222\000\255\255\079\000\255\255\
    \255\255\205\000\114\000\255\255\255\255\255\255\255\255\111\000\
    \255\255\204\000\114\000\255\255\255\255\145\000\145\000\255\255\
    \206\000\091\000\063\000\207\000\255\255\255\255\208\000\209\000\
    \255\255\080\000\210\000\212\000\255\255\213\000\046\000\046\000\
    \046\000\046\000\045\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\045\000\211\000\217\000\046\000\046\000\046\000\
    \047\000\047\000\047\000\047\000\255\255\255\255\255\255\115\000\
    \034\000\167\000\146\000\255\255\076\000\255\255\255\255\130\000\
    \085\000\132\000\255\255\255\255\255\255\076\000\255\255\130\000\
    \031\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\169\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\165\000\165\000\165\000\165\000\214\000\215\000\255\255\
    \216\000\101\000\255\255\255\255\255\255\255\255\218\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\130\000\219\000\
    \220\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\199\000\169\000\167\000\221\000\200\000\223\000\
    \255\255\224\000\225\000\031\000\226\000\227\000\230\000\201\000\
    \022\000\132\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \244\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\020\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\245\000\255\255\255\255\255\255\255\255\242\000\
    \255\255\255\255\202\000\246\000\203\000\255\255\255\255\255\255\
    \255\255\247\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\248\000\034\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\010\001\011\001\255\255\
    \255\255\255\255\255\255\255\255\012\001\255\255\235\000\235\000\
    \235\000\235\000\068\000\013\001\243\000\255\255\068\000\068\000\
    \068\000\068\000\068\000\068\000\255\255\000\000\000\000\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\018\000\000\000\000\000\000\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\020\000\255\255\
    \255\255\255\255\255\255\239\000\239\000\239\000\239\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\065\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\022\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\068\000\000\000\255\255\
    \255\255\068\000\068\000\068\000\068\000\068\000\068\000\000\000\
    \018\000\251\000\251\000\251\000\251\000\020\000\000\000\000\000\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\068\000\068\000\068\000\068\000\068\000\
    \068\000\000\000\000\000\000\000\255\255\255\000\255\000\255\000\
    \255\000\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \255\255\255\255\255\000\255\000\255\000\255\000\005\001\020\000\
    \000\000\255\255\255\255\255\255\255\255\002\001\002\001\002\001\
    \002\001\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\078\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \022\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\001\001\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\081\000\000\000\255\255\255\255\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\254\000\
    \000\000\254\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \000\000\255\255\255\255\002\001\002\001\002\001\002\001\000\000\
    \255\255\255\255\081\000\081\000\081\000\081\000\081\000\081\000\
    \255\255\001\001\000\000\000\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\003\001\003\001\003\001\003\001\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\000\000\000\000\255\255\
    \255\255\000\000\000\000\255\255\022\000\007\001\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \020\000\000\000\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \005\001\008\001\005\001\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\014\001\014\001\014\001\014\001\014\001\
    \014\001\014\001\014\001\000\000\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \000\000\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\022\000\120\000\255\255\121\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\005\001\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\113\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \116\000\000\000\000\000\255\255\116\000\116\000\116\000\116\000\
    \116\000\116\000\116\000\000\000\000\000\000\000\116\000\116\000\
    \116\000\116\000\116\000\116\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\116\000\116\000\
    \116\000\116\000\116\000\116\000\255\255\000\000\000\000\000\000\
    \116\000\116\000\116\000\116\000\116\000\116\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\085\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\087\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\255\255\255\255\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\144\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\147\000\000\000\000\000\000\000\147\000\147\000\147\000\
    \147\000\147\000\147\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\147\000\
    \147\000\147\000\147\000\147\000\147\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\022\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\000\000\255\255\000\000\000\000\000\000\000\000\
    \147\000\000\000\000\000\000\000\147\000\147\000\147\000\147\000\
    \147\000\147\000\255\255\255\255\255\255\000\000\000\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\147\000\147\000\
    \147\000\147\000\147\000\147\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \020\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\018\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\034\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\022\000\241\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\255\255\255\255\255\255\003\001\003\001\003\001\003\001\
    ";
  Lexing.lex_check = 
   "\001\000\001\000\255\255\002\000\002\000\007\000\007\000\002\000\
    \002\000\002\000\002\000\002\000\008\000\008\000\123\000\124\000\
    \125\000\017\000\127\000\171\000\019\000\005\000\005\000\172\000\
    \003\000\151\000\151\000\173\000\126\000\174\000\029\000\029\000\
    \152\000\152\000\009\000\009\000\028\000\028\000\175\000\176\000\
    \030\000\030\000\160\000\177\000\178\000\160\000\179\000\180\000\
    \182\000\010\000\010\000\183\000\160\000\184\000\160\000\185\000\
    \032\000\032\000\013\000\013\000\186\000\000\000\033\000\001\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\003\000\005\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\004\000\004\000\
    \021\000\026\000\004\000\004\000\004\000\004\000\004\000\009\000\
    \017\000\017\000\009\000\019\000\019\000\027\000\010\000\003\000\
    \003\000\003\000\003\000\028\000\029\000\010\000\010\000\013\000\
    \036\000\009\000\009\000\009\000\006\000\006\000\030\000\013\000\
    \006\000\006\000\006\000\006\000\006\000\010\000\010\000\032\000\
    \010\000\010\000\010\000\035\000\040\000\035\000\037\000\037\000\
    \057\000\013\000\013\000\013\000\047\000\047\000\047\000\047\000\
    \038\000\038\000\058\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \016\000\016\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\061\000\037\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\011\000\
    \011\000\038\000\065\000\011\000\011\000\011\000\011\000\011\000\
    \048\000\048\000\048\000\048\000\075\000\086\000\088\000\089\000\
    \089\000\093\000\096\000\097\000\097\000\016\000\104\000\106\000\
    \107\000\109\000\117\000\122\000\016\000\012\000\012\000\128\000\
    \140\000\012\000\012\000\012\000\012\000\012\000\120\000\016\000\
    \120\000\156\000\156\000\159\000\187\000\066\000\016\000\095\000\
    \095\000\188\000\189\000\014\000\014\000\094\000\094\000\065\000\
    \190\000\191\000\039\000\039\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\025\000\025\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\066\000\
    \014\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \014\000\015\000\015\000\039\000\078\000\015\000\015\000\015\000\
    \015\000\015\000\014\000\164\000\094\000\095\000\192\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\193\000\025\000\098\000\
    \098\000\099\000\099\000\195\000\199\000\025\000\079\000\041\000\
    \041\000\201\000\114\000\129\000\129\000\130\000\130\000\162\000\
    \025\000\202\000\113\000\131\000\131\000\144\000\145\000\025\000\
    \205\000\162\000\162\000\206\000\044\000\044\000\207\000\208\000\
    \163\000\078\000\209\000\200\000\044\000\200\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\210\000\212\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\041\000\045\000\045\000\113\000\
    \079\000\164\000\144\000\041\000\114\000\045\000\166\000\129\000\
    \099\000\130\000\133\000\133\000\168\000\098\000\041\000\131\000\
    \145\000\044\000\044\000\044\000\044\000\041\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\132\000\132\000\163\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\049\000\
    \049\000\165\000\165\000\165\000\165\000\213\000\214\000\049\000\
    \215\000\216\000\045\000\045\000\045\000\045\000\217\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\133\000\218\000\
    \219\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \050\000\050\000\198\000\168\000\166\000\220\000\198\000\222\000\
    \050\000\223\000\224\000\132\000\225\000\226\000\229\000\198\000\
    \230\000\132\000\228\000\228\000\049\000\049\000\049\000\049\000\
    \242\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \053\000\053\000\243\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\244\000\231\000\231\000\233\000\233\000\241\000\
    \234\000\234\000\198\000\245\000\198\000\050\000\050\000\050\000\
    \050\000\246\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\247\000\248\000\228\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\055\000\055\000\009\001\010\001\055\000\
    \055\000\055\000\055\000\055\000\011\001\053\000\235\000\235\000\
    \235\000\235\000\067\000\012\001\241\000\053\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\231\000\255\255\255\255\053\000\
    \255\255\255\255\064\000\064\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\064\000\255\255\233\000\255\255\255\255\255\255\
    \067\000\067\000\067\000\067\000\067\000\067\000\234\000\236\000\
    \236\000\237\000\237\000\239\000\239\000\239\000\239\000\255\255\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\069\000\069\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\255\255\064\000\
    \064\000\064\000\064\000\255\255\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\071\000\071\000\255\255\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\068\000\255\255\004\001\
    \004\001\068\000\068\000\068\000\068\000\068\000\068\000\255\255\
    \237\000\251\000\251\000\251\000\251\000\236\000\255\255\255\255\
    \073\000\073\000\069\000\255\255\073\000\073\000\073\000\073\000\
    \073\000\255\255\069\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\255\255\255\255\255\255\069\000\254\000\254\000\254\000\
    \254\000\069\000\069\000\069\000\069\000\069\000\069\000\255\255\
    \071\000\077\000\077\000\250\000\250\000\255\255\255\255\255\255\
    \071\000\077\000\255\000\255\000\255\000\255\000\004\001\068\000\
    \255\255\252\000\252\000\253\000\253\000\001\001\001\001\001\001\
    \001\001\255\255\071\000\071\000\071\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\000\001\000\001\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\082\000\082\000\255\255\077\000\077\000\
    \077\000\077\000\255\255\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\250\000\136\000\136\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\080\000\255\255\005\001\005\001\
    \080\000\080\000\080\000\080\000\080\000\080\000\081\000\252\000\
    \255\255\253\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \255\255\084\000\084\000\002\001\002\001\002\001\002\001\255\255\
    \082\000\084\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \082\000\000\001\255\255\255\255\081\000\081\000\081\000\081\000\
    \081\000\081\000\003\001\003\001\003\001\003\001\255\255\092\000\
    \092\000\255\255\082\000\082\000\082\000\255\255\255\255\092\000\
    \136\000\255\255\255\255\136\000\005\001\005\001\255\255\255\255\
    \255\255\006\001\006\001\007\001\007\001\255\255\255\255\255\255\
    \081\000\255\255\136\000\136\000\136\000\255\255\084\000\084\000\
    \084\000\084\000\255\255\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\102\000\102\000\255\255\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\092\000\092\000\092\000\092\000\
    \255\255\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \006\001\007\001\007\001\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\103\000\103\000\255\255\255\255\103\000\103\000\
    \103\000\103\000\103\000\013\001\013\001\013\001\013\001\014\001\
    \014\001\014\001\014\001\255\255\255\255\008\001\008\001\102\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\102\000\102\000\
    \105\000\105\000\255\255\255\255\105\000\105\000\105\000\105\000\
    \105\000\255\255\255\255\255\255\255\255\255\255\102\000\102\000\
    \255\255\102\000\102\000\102\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\103\000\
    \103\000\103\000\103\000\103\000\103\000\103\000\103\000\103\000\
    \103\000\103\000\103\000\103\000\103\000\103\000\103\000\103\000\
    \103\000\103\000\103\000\103\000\008\001\255\255\103\000\103\000\
    \103\000\103\000\103\000\103\000\103\000\105\000\105\000\105\000\
    \105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\105\000\255\255\255\255\105\000\105\000\105\000\105\000\
    \105\000\105\000\105\000\112\000\112\000\255\255\255\255\255\255\
    \115\000\255\255\255\255\112\000\115\000\115\000\115\000\115\000\
    \115\000\115\000\116\000\255\255\255\255\255\255\116\000\116\000\
    \116\000\116\000\116\000\116\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\119\000\119\000\115\000\115\000\
    \115\000\115\000\115\000\115\000\119\000\255\255\255\255\255\255\
    \116\000\116\000\116\000\116\000\116\000\116\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \112\000\112\000\112\000\112\000\255\255\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\116\000\134\000\134\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\255\255\255\255\
    \255\255\119\000\119\000\119\000\119\000\255\255\119\000\119\000\
    \119\000\119\000\119\000\119\000\119\000\119\000\119\000\119\000\
    \119\000\119\000\119\000\119\000\119\000\255\255\255\255\255\255\
    \119\000\119\000\119\000\119\000\119\000\119\000\119\000\121\000\
    \121\000\255\255\255\255\121\000\121\000\121\000\121\000\121\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\134\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\134\000\134\000\255\255\255\255\137\000\137\000\255\255\
    \255\255\137\000\137\000\137\000\137\000\137\000\255\255\255\255\
    \255\255\134\000\134\000\255\255\134\000\134\000\134\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\255\255\255\255\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\137\000\137\000\137\000\137\000\137\000\137\000\
    \137\000\137\000\137\000\137\000\137\000\137\000\137\000\137\000\
    \137\000\137\000\137\000\137\000\137\000\137\000\137\000\255\255\
    \255\255\137\000\137\000\137\000\137\000\137\000\137\000\137\000\
    \138\000\138\000\255\255\255\255\138\000\138\000\138\000\138\000\
    \138\000\146\000\255\255\255\255\255\255\146\000\146\000\146\000\
    \146\000\146\000\146\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\142\000\142\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\142\000\146\000\
    \146\000\146\000\146\000\146\000\146\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\148\000\148\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\255\255\255\255\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\142\000\142\000\142\000\142\000\255\255\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\255\255\
    \255\255\255\255\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\143\000\143\000\255\255\255\255\255\255\255\255\255\255\
    \148\000\143\000\255\255\148\000\255\255\255\255\255\255\255\255\
    \147\000\255\255\255\255\255\255\147\000\147\000\147\000\147\000\
    \147\000\147\000\148\000\148\000\148\000\255\255\255\255\154\000\
    \154\000\255\255\255\255\255\255\255\255\255\255\255\255\154\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\147\000\147\000\
    \147\000\147\000\147\000\147\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\143\000\143\000\
    \143\000\143\000\255\255\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\147\000\255\255\255\255\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\154\000\154\000\154\000\154\000\
    \255\255\154\000\154\000\154\000\154\000\154\000\154\000\154\000\
    \154\000\154\000\154\000\154\000\154\000\154\000\154\000\154\000\
    \255\255\255\255\255\255\154\000\154\000\154\000\154\000\154\000\
    \154\000\154\000\155\000\155\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\155\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \161\000\161\000\255\255\255\255\161\000\161\000\161\000\161\000\
    \161\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\155\000\
    \155\000\155\000\155\000\255\255\155\000\155\000\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\155\000\155\000\155\000\
    \155\000\155\000\155\000\255\255\255\255\255\255\155\000\155\000\
    \155\000\155\000\155\000\155\000\155\000\161\000\161\000\161\000\
    \161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\
    \161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\
    \161\000\161\000\255\255\255\255\161\000\161\000\161\000\161\000\
    \161\000\161\000\161\000\170\000\170\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\170\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\232\000\232\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\232\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \170\000\170\000\170\000\170\000\255\255\170\000\170\000\170\000\
    \170\000\170\000\170\000\170\000\170\000\170\000\170\000\170\000\
    \170\000\170\000\170\000\170\000\255\255\255\255\255\255\170\000\
    \170\000\170\000\170\000\170\000\170\000\170\000\232\000\232\000\
    \232\000\232\000\255\255\232\000\232\000\232\000\232\000\232\000\
    \232\000\232\000\232\000\232\000\232\000\232\000\232\000\232\000\
    \232\000\232\000\255\255\255\255\255\255\232\000\232\000\232\000\
    \232\000\232\000\232\000\232\000\238\000\238\000\255\255\255\255\
    \238\000\238\000\238\000\238\000\238\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\240\000\240\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\240\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\238\000\238\000\238\000\238\000\238\000\238\000\238\000\
    \238\000\238\000\238\000\238\000\238\000\238\000\238\000\238\000\
    \238\000\238\000\238\000\238\000\238\000\238\000\255\255\255\255\
    \238\000\238\000\238\000\238\000\238\000\238\000\238\000\240\000\
    \240\000\240\000\240\000\255\255\240\000\240\000\240\000\240\000\
    \240\000\240\000\240\000\240\000\240\000\240\000\240\000\240\000\
    \240\000\240\000\240\000\255\255\255\255\255\255\240\000\240\000\
    \240\000\240\000\240\000\240\000\240\000\249\000\249\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\249\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\249\000\249\000\249\000\249\000\255\255\249\000\
    \249\000\249\000\249\000\249\000\249\000\249\000\249\000\249\000\
    \249\000\249\000\249\000\249\000\249\000\249\000\255\255\255\255\
    \255\255\249\000\249\000\249\000\249\000\249\000\249\000\249\000\
    "
}

let rec detect_xml_pi engine lexbuf = 
  match engine lex_tables 0 lexbuf with
    0 -> (
# 193 "pxp_wlex_utf8_01.mll"
        true )
  | 1 -> (
# 195 "pxp_wlex_utf8_01.mll"
        false )
  | _ -> failwith "lexing: empty token [detect_xml_pi]"

and scan_pi_string engine lexbuf = 
  match engine lex_tables 1 lexbuf with
    0 -> (
# 203 "pxp_wlex_utf8_01.mll"
        let len = 
	  Pxp_lexing.lexeme_end lexbuf - Pxp_lexing.lexeme_start lexbuf in
	Some (Pxp_lexing.sub_lexeme lexbuf 0 (len-2)) 
      )
  | 1 -> (
# 208 "pxp_wlex_utf8_01.mll"
        None )
  | _ -> failwith "lexing: empty token [scan_pi_string]"

and scan_xml_pi engine lexbuf = 
  match engine lex_tables 2 lexbuf with
    0 -> (
# 216 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
	let j = get_name_end s 0 in
	Pro_name (String.sub s 0 j)
      )
  | 1 -> (
# 221 "pxp_wlex_utf8_01.mll"
        Pro_eq )
  | 2 -> (
# 223 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
	let j = String.index_from s 1 '\'' in
	Pro_string (String.sub s 1 (j-1))
      )
  | 3 -> (
# 228 "pxp_wlex_utf8_01.mll"
        raise (WF_error ("Cannot find the second quotation mark"))
      )
  | 4 -> (
# 231 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
	let j = String.index_from s 1 '"' in
	Pro_string (String.sub s 1 (j-1))
      )
  | 5 -> (
# 236 "pxp_wlex_utf8_01.mll"
        raise (WF_error ("Cannot find the second quotation mark"))
      )
  | 6 -> (
# 239 "pxp_wlex_utf8_01.mll"
        Pro_eof )
  | 7 -> (
# 241 "pxp_wlex_utf8_01.mll"
        (* Nothing matches: If at least a valid character follows, raise
         * the exception that this character is not allowed here. Otherwise,
         * raise Malformed_code.
         *)
        !lexerset.scan_character lexbuf;
	raise (WF_error("Illegal token or character")) 
      )
  | _ -> failwith "lexing: empty token [scan_xml_pi]"

and scan_document engine lexbuf = 
  match engine lex_tables 3 lexbuf with
    0 -> (
# 255 "pxp_wlex_utf8_01.mll"
        (* Scan the rest of the processing instruction: *)
	match !lexerset.scan_pi_string lexbuf with
  	  None ->
	    raise (WF_error ("Illegal processing instruction"))
	| Some pi ->
	    scan_pi pi !lexerset.scan_xml_pi, Document 
      )
  | 1 -> (
# 263 "pxp_wlex_utf8_01.mll"
        tok_Doctype__Document_type )
  | 2 -> (
# 265 "pxp_wlex_utf8_01.mll"
        Comment_begin dummy_entity, (Comment Document) )
  | 3 -> (
# 267 "pxp_wlex_utf8_01.mll"
        raise (WF_error "Declaration either malformed or not allowed in this context") 
      )
  | 4 -> (
# 270 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
	( Tag_beg (String.sub s 1 (String.length s - 1), dummy_entity), 
	  Within_tag_entry
        )
      )
  | 5 -> (
# 276 "pxp_wlex_utf8_01.mll"
        raise (WF_error ("Illegal token")) )
  | 6 -> (
# 278 "pxp_wlex_utf8_01.mll"
        tok_Ignore__Document )
  | 7 -> (
# 280 "pxp_wlex_utf8_01.mll"
        tok_Eof__Document )
  | 8 -> (
# 282 "pxp_wlex_utf8_01.mll"
        (* Nothing matches: If at least a valid character follows, raise
         * the exception that this character is not allowed here. Otherwise,
         * raise Malformed_code.
         *)
        !lexerset.scan_character lexbuf;
 	raise (WF_error ("Content not allowed here"))
      )
  | _ -> failwith "lexing: empty token [scan_document]"

and scan_document_type engine lexbuf = 
  match engine lex_tables 4 lexbuf with
    0 -> (
# 296 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
	Name s, Document_type )
  | 1 -> (
# 299 "pxp_wlex_utf8_01.mll"
        tok_Ignore__Document_type )
  | 2 -> (
# 301 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
	(Unparsed_string (String.sub s 1 (String.length s - 2))), Document_type )
  | 3 -> (
# 304 "pxp_wlex_utf8_01.mll"
        raise (WF_error ("Cannot find the second quotation mark"))
      )
  | 4 -> (
# 307 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
	(Unparsed_string (String.sub s 1 (String.length s - 2))), Document_type )
  | 5 -> (
# 310 "pxp_wlex_utf8_01.mll"
        raise (WF_error ("Cannot find the second quotation mark"))
      )
  | 6 -> (
# 313 "pxp_wlex_utf8_01.mll"
        tok_Dtd_begin__Declaration )
  | 7 -> (
# 315 "pxp_wlex_utf8_01.mll"
        tok_Doctype_rangle__Document )
  | 8 -> (
# 317 "pxp_wlex_utf8_01.mll"
        tok_Eof__Document_type )
  | 9 -> (
# 319 "pxp_wlex_utf8_01.mll"
        raise (WF_error("References to general entities not allowed here")) )
  | 10 -> (
# 321 "pxp_wlex_utf8_01.mll"
        raise (WF_error("References to parameter entities not allowed here")) )
  | 11 -> (
# 323 "pxp_wlex_utf8_01.mll"
        (* Nothing matches: If at least a valid character follows, raise
         * the exception that this character is not allowed here. Otherwise,
         * raise Malformed_code.
         *)
        !lexerset.scan_character lexbuf;
 	raise (WF_error ("Content not allowed here"))
      )
  | _ -> failwith "lexing: empty token [scan_document_type]"

and scan_comment engine lexbuf = 
  match engine lex_tables 5 lexbuf with
    0 -> (
# 337 "pxp_wlex_utf8_01.mll"
        fun lexid -> 
          Comment_end dummy_entity, lexid )
  | 1 -> (
# 340 "pxp_wlex_utf8_01.mll"
        fun lexid ->
          raise (WF_error "Double hyphens are illegal inside comments") )
  | 2 -> (
# 343 "pxp_wlex_utf8_01.mll"
        fun lexid ->
          Comment_material "-", (Comment lexid) )
  | 3 -> (
# 346 "pxp_wlex_utf8_01.mll"
        fun lexid ->
	  Comment_material(Lexing.lexeme lexbuf), (Comment lexid) )
  | 4 -> (
# 349 "pxp_wlex_utf8_01.mll"
        fun lexid -> Eof, (Comment lexid) )
  | 5 -> (
# 351 "pxp_wlex_utf8_01.mll"
        fun lexid -> raise Netconversion.Malformed_code )
  | _ -> failwith "lexing: empty token [scan_comment]"

and scan_declaration engine lexbuf = 
  match engine lex_tables 6 lexbuf with
    0 -> (
# 360 "pxp_wlex_utf8_01.mll"
        tok_Ignore__Declaration )
  | 1 -> (
# 362 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
	(PERef (String.sub s 1 (String.length s - 2))), Declaration )
  | 2 -> (
# 365 "pxp_wlex_utf8_01.mll"
        tok_Percent__Declaration )
  | 3 -> (
# 367 "pxp_wlex_utf8_01.mll"
        raise(WF_error("References to general entities not allowed in DTDs")) )
  | 4 -> (
# 369 "pxp_wlex_utf8_01.mll"
        Name (Lexing.lexeme lexbuf), Declaration )
  | 5 -> (
# 371 "pxp_wlex_utf8_01.mll"
        Nametoken (Lexing.lexeme lexbuf), Declaration )
  | 6 -> (
# 373 "pxp_wlex_utf8_01.mll"
        tok_Plus__Declaration )
  | 7 -> (
# 375 "pxp_wlex_utf8_01.mll"
        tok_Star__Declaration )
  | 8 -> (
# 377 "pxp_wlex_utf8_01.mll"
        tok_Bar__Declaration )
  | 9 -> (
# 379 "pxp_wlex_utf8_01.mll"
        tok_Comma__Declaration )
  | 10 -> (
# 381 "pxp_wlex_utf8_01.mll"
        tok_Qmark__Declaration )
  | 11 -> (
# 383 "pxp_wlex_utf8_01.mll"
        tok_Lparen__Declaration )
  | 12 -> (
# 385 "pxp_wlex_utf8_01.mll"
        tok_RparenPlus__Declaration )
  | 13 -> (
# 387 "pxp_wlex_utf8_01.mll"
        tok_RparenStar__Declaration )
  | 14 -> (
# 389 "pxp_wlex_utf8_01.mll"
        tok_RparenQmark__Declaration )
  | 15 -> (
# 391 "pxp_wlex_utf8_01.mll"
        tok_Rparen__Declaration )
  | 16 -> (
# 393 "pxp_wlex_utf8_01.mll"
        tok_Required__Declaration )
  | 17 -> (
# 395 "pxp_wlex_utf8_01.mll"
        tok_Implied__Declaration )
  | 18 -> (
# 397 "pxp_wlex_utf8_01.mll"
        tok_Fixed__Declaration )
  | 19 -> (
# 399 "pxp_wlex_utf8_01.mll"
        tok_Pcdata__Declaration )
  | 20 -> (
# 401 "pxp_wlex_utf8_01.mll"
        tok_Decl_element__Declaration )
  | 21 -> (
# 403 "pxp_wlex_utf8_01.mll"
        tok_Decl_attlist__Declaration )
  | 22 -> (
# 405 "pxp_wlex_utf8_01.mll"
        tok_Decl_entity__Declaration )
  | 23 -> (
# 407 "pxp_wlex_utf8_01.mll"
        tok_Decl_notation__Declaration )
  | 24 -> (
# 409 "pxp_wlex_utf8_01.mll"
        Comment_begin dummy_entity, (Comment Declaration) )
  | 25 -> (
# 411 "pxp_wlex_utf8_01.mll"
        tok_Conditional_begin__Declaration )
  | 26 -> (
# 413 "pxp_wlex_utf8_01.mll"
        tok_Conditional_end__Declaration )
  | 27 -> (
# 415 "pxp_wlex_utf8_01.mll"
        tok_Conditional_body__Declaration )
  | 28 -> (
# 417 "pxp_wlex_utf8_01.mll"
        (* Scan the rest of the processing instruction: *)
	match !lexerset.scan_pi_string lexbuf with
  	  None ->
	    raise (WF_error ("Illegal processing instruction"))
	| Some pi ->
	    scan_pi pi !lexerset.scan_xml_pi, Declaration
      )
  | 29 -> (
# 425 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
        (* Check that characters are well-formed: *)
	ignore(!lexerset.scan_characters (Lexing.from_string s));
	(Unparsed_string (String.sub s 1 (String.length s - 2))), Declaration )
  | 30 -> (
# 430 "pxp_wlex_utf8_01.mll"
        raise (WF_error ("Cannot find the second quotation mark"))
      )
  | 31 -> (
# 433 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
        (* Check that characters are well-formed: *)
	ignore(!lexerset.scan_characters (Lexing.from_string s));
	(Unparsed_string (String.sub s 1 (String.length s - 2))), Declaration )
  | 32 -> (
# 438 "pxp_wlex_utf8_01.mll"
        raise (WF_error ("Cannot find the second quotation mark"))
      )
  | 33 -> (
# 441 "pxp_wlex_utf8_01.mll"
        tok_Decl_rangle__Declaration )
  | 34 -> (
# 443 "pxp_wlex_utf8_01.mll"
        tok_Dtd_end__Document_type )
  | 35 -> (
# 445 "pxp_wlex_utf8_01.mll"
        tok_Eof__Declaration )
  | 36 -> (
# 447 "pxp_wlex_utf8_01.mll"
        raise (WF_error "Declaration either malformed or not allowed in this context") 
      )
  | 37 -> (
# 450 "pxp_wlex_utf8_01.mll"
        (* Nothing matches: If at least a valid character follows, raise
         * the exception that this character is not allowed here. Otherwise,
         * raise Malformed_code.
         *)
        !lexerset.scan_character lexbuf;
 	raise (WF_error("Illegal token or character"))
      )
  | _ -> failwith "lexing: empty token [scan_declaration]"

and scan_characters engine lexbuf = 
  match engine lex_tables 7 lexbuf with
    0 -> (
# 466 "pxp_wlex_utf8_01.mll"
      () )
  | 1 -> (
# 468 "pxp_wlex_utf8_01.mll"
      () )
  | 2 -> (
# 470 "pxp_wlex_utf8_01.mll"
      raise Netconversion.Malformed_code )
  | _ -> failwith "lexing: empty token [scan_characters]"

and scan_character engine lexbuf = 
  match engine lex_tables 8 lexbuf with
    0 -> (
# 480 "pxp_wlex_utf8_01.mll"
      () )
  | 1 -> (
# 482 "pxp_wlex_utf8_01.mll"
      () )
  | 2 -> (
# 484 "pxp_wlex_utf8_01.mll"
      raise Netconversion.Malformed_code )
  | _ -> failwith "lexing: empty token [scan_character]"

and scan_dtd_string engine lexbuf = 
  match engine lex_tables 9 lexbuf with
    0 -> (
# 494 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
	PERef (String.sub s 1 (String.length s - 2)) )
  | 1 -> (
# 497 "pxp_wlex_utf8_01.mll"
        raise(WF_error("The character '%' must be written as '&#37;'")) )
  | 2 -> (
# 499 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
	ERef (String.sub s 1 (String.length s - 2)) )
  | 3 -> (
# 502 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
	CRef (int_of_string (String.sub s 2 (String.length s - 3))) )
  | 4 -> (
# 505 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
	CRef (int_of_string ("0x" ^ String.sub s 3 (String.length s - 4))) )
  | 5 -> (
# 508 "pxp_wlex_utf8_01.mll"
        raise(WF_error("The character '&' must be written as '&amp;'")) )
  | 6 -> (
# 510 "pxp_wlex_utf8_01.mll"
        CRef(-1) )
  | 7 -> (
# 512 "pxp_wlex_utf8_01.mll"
        CRef(-2) )
  | 8 -> (
# 514 "pxp_wlex_utf8_01.mll"
        CRef(-3) )
  | 9 -> (
# 516 "pxp_wlex_utf8_01.mll"
        tok_CharDataTAB )
  | 10 -> (
# 518 "pxp_wlex_utf8_01.mll"
        CharData (Lexing.lexeme lexbuf) )
  | 11 -> (
# 520 "pxp_wlex_utf8_01.mll"
        Eof )
  | 12 -> (
# 522 "pxp_wlex_utf8_01.mll"
        raise Netconversion.Malformed_code )
  | _ -> failwith "lexing: empty token [scan_dtd_string]"

and scan_content engine lexbuf = 
  match engine lex_tables 10 lexbuf with
    0 -> (
# 530 "pxp_wlex_utf8_01.mll"
        (* Scan the rest of the processing instruction: *)
	match !lexerset.scan_pi_string lexbuf with
  	  None ->
	    raise (WF_error ("Illegal processing instruction"))
	| Some pi ->
	    scan_pi pi !lexerset.scan_xml_pi, Content
      )
  | 1 -> (
# 538 "pxp_wlex_utf8_01.mll"
        Comment_begin dummy_entity, (Comment Content) )
  | 2 -> (
# 541 "pxp_wlex_utf8_01.mll"
        let l = Lexing.lexeme_end lexbuf - Lexing.lexeme_start lexbuf in
	if Lexing.lexeme_char lexbuf 1 = '/' then
	  Tag_end (Pxp_lexing.sub_lexeme lexbuf 2 (l-2), dummy_entity), 
	  Within_tag_entry
	else
	  Tag_beg (Pxp_lexing.sub_lexeme lexbuf 1 (l-1), dummy_entity), 
	  Within_tag_entry
      )
  | 3 -> (
# 550 "pxp_wlex_utf8_01.mll"
        let l = Lexing.lexeme_end lexbuf - Lexing.lexeme_start lexbuf in
	Cdata (Pxp_lexing.sub_lexeme lexbuf 9 (l-12)), Content )
  | 4 -> (
# 553 "pxp_wlex_utf8_01.mll"
        raise (WF_error "Declaration either malformed or not allowed in this context") 
      )
  | 5 -> (
# 556 "pxp_wlex_utf8_01.mll"
        raise (WF_error ("The left angle bracket '<' must be written as '&lt;'"))
      )
  | 6 -> (
# 559 "pxp_wlex_utf8_01.mll"
        let l = Lexing.lexeme_end lexbuf - Lexing.lexeme_start lexbuf in
	CRef (int_of_string (Pxp_lexing.sub_lexeme lexbuf 2 (l-3))), Content )
  | 7 -> (
# 562 "pxp_wlex_utf8_01.mll"
        let l = Lexing.lexeme_end lexbuf - Lexing.lexeme_start lexbuf in
	CRef (int_of_string ("0x" ^ Pxp_lexing.sub_lexeme lexbuf 3 (l-4))), Content )
  | 8 -> (
# 565 "pxp_wlex_utf8_01.mll"
        let l = Lexing.lexeme_end lexbuf - Lexing.lexeme_start lexbuf in
	ERef (Pxp_lexing.sub_lexeme lexbuf 1 (l-2)), Content )
  | 9 -> (
# 568 "pxp_wlex_utf8_01.mll"
        raise (WF_error ("The ampersand '&' must be written as '&amp;'"))
      )
  | 10 -> (
# 571 "pxp_wlex_utf8_01.mll"
        tok_LLcurly__Content )
  | 11 -> (
# 573 "pxp_wlex_utf8_01.mll"
        tok_RRcurly__Content )
  | 12 -> (
# 575 "pxp_wlex_utf8_01.mll"
        tok_Lcurly__Content )
  | 13 -> (
# 577 "pxp_wlex_utf8_01.mll"
        tok_Rcurly__Content )
  | 14 -> (
# 587 "pxp_wlex_utf8_01.mll"
        tok_LineEndCRLF__Content )
  | 15 -> (
# 589 "pxp_wlex_utf8_01.mll"
        tok_LineEndCR__Content )
  | 16 -> (
# 591 "pxp_wlex_utf8_01.mll"
        tok_LineEndLF__Content )
  | 17 -> (
# 593 "pxp_wlex_utf8_01.mll"
        tok_CharDataTAB__Content )
  | 18 -> (
# 595 "pxp_wlex_utf8_01.mll"
        tok_Eof__Content )
  | 19 -> (
# 597 "pxp_wlex_utf8_01.mll"
        raise (WF_error ("The sequence ']]>' must be written as ']]&gt;'"))
      )
  | 20 -> (
# 600 "pxp_wlex_utf8_01.mll"
        tok_CharDataRBRACKET__Content )
  | 21 -> (
# 602 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
	CharData s, Content 
      )
  | 22 -> (
# 606 "pxp_wlex_utf8_01.mll"
        raise Netconversion.Malformed_code )
  | _ -> failwith "lexing: empty token [scan_content]"

and scan_within_tag engine lexbuf = 
  match engine lex_tables 11 lexbuf with
    0 -> (
# 614 "pxp_wlex_utf8_01.mll"
        tok_IgnoreLineEnd__Within_tag )
  | 1 -> (
# 616 "pxp_wlex_utf8_01.mll"
        tok_IgnoreLineEnd__Within_tag )
  | 2 -> (
# 618 "pxp_wlex_utf8_01.mll"
        tok_IgnoreLineEnd__Within_tag )
  | 3 -> (
# 620 "pxp_wlex_utf8_01.mll"
        tok_Ignore__Within_tag )
  | 4 -> (
# 622 "pxp_wlex_utf8_01.mll"
        Name (Lexing.lexeme lexbuf ), Within_tag )
  | 5 -> (
# 624 "pxp_wlex_utf8_01.mll"
        tok_Eq__Within_tag )
  | 6 -> (
# 626 "pxp_wlex_utf8_01.mll"
        let l = Lexing.lexeme_end lexbuf - Lexing.lexeme_start lexbuf in
	let v = Pxp_lexing.sub_lexeme lexbuf 1 (l-2) in
	Attval v, Within_tag )
  | 7 -> (
# 630 "pxp_wlex_utf8_01.mll"
        raise (WF_error ("Cannot find the second quotation mark"))
      )
  | 8 -> (
# 633 "pxp_wlex_utf8_01.mll"
        let l = Lexing.lexeme_end lexbuf - Lexing.lexeme_start lexbuf in
	let v = Pxp_lexing.sub_lexeme lexbuf 1 (l-2) in
	Attval v, Within_tag )
  | 9 -> (
# 637 "pxp_wlex_utf8_01.mll"
        raise (WF_error ("Cannot find the second quotation mark"))
      )
  | 10 -> (
# 640 "pxp_wlex_utf8_01.mll"
        tok_Rangle__Content )
  | 11 -> (
# 642 "pxp_wlex_utf8_01.mll"
        tok_Rangle_empty__Content )
  | 12 -> (
# 644 "pxp_wlex_utf8_01.mll"
        tok_Eof__Within_tag )
  | 13 -> (
# 646 "pxp_wlex_utf8_01.mll"
        (* Nothing matches: If at least a valid character follows, raise
         * the exception that this character is not allowed here. Otherwise,
         * raise Malformed_code.
         *)
        !lexerset.scan_character lexbuf;
 	raise (WF_error ("Illegal inside tags"))
      )
  | _ -> failwith "lexing: empty token [scan_within_tag]"

and scan_tag_eb engine lexbuf = 
  match engine lex_tables 12 lexbuf with
    0 -> (
# 663 "pxp_wlex_utf8_01.mll"
        tok_IgnoreLineEnd__Tag_eb )
  | 1 -> (
# 665 "pxp_wlex_utf8_01.mll"
        tok_IgnoreLineEnd__Tag_eb )
  | 2 -> (
# 667 "pxp_wlex_utf8_01.mll"
        tok_IgnoreLineEnd__Tag_eb )
  | 3 -> (
# 669 "pxp_wlex_utf8_01.mll"
        tok_Ignore__Tag_eb )
  | 4 -> (
# 671 "pxp_wlex_utf8_01.mll"
        Name (Lexing.lexeme lexbuf ), Tag_eb )
  | 5 -> (
# 673 "pxp_wlex_utf8_01.mll"
        tok_Eq__Tag_eb )
  | 6 -> (
# 675 "pxp_wlex_utf8_01.mll"
        tok_DQuote__Tag_eb_att_true )
  | 7 -> (
# 677 "pxp_wlex_utf8_01.mll"
        tok_SQuote__Tag_eb_att_false )
  | 8 -> (
# 679 "pxp_wlex_utf8_01.mll"
        tok_Rangle__Content )
  | 9 -> (
# 681 "pxp_wlex_utf8_01.mll"
        tok_Rangle_empty__Content )
  | 10 -> (
# 683 "pxp_wlex_utf8_01.mll"
        tok_Eof__Tag_eb )
  | 11 -> (
# 685 "pxp_wlex_utf8_01.mll"
        (* Nothing matches: If at least a valid character follows, raise
         * the exception that this character is not allowed here. Otherwise,
         * raise Malformed_code.
         *)
        !lexerset.scan_character lexbuf;
 	raise (WF_error ("Illegal inside tags"))
      )
  | _ -> failwith "lexing: empty token [scan_tag_eb]"

and scan_content_string engine lexbuf = 
  match engine lex_tables 13 lexbuf with
    0 -> (
# 701 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
	ERef (String.sub s 1 (String.length s - 2)) )
  | 1 -> (
# 704 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
	CRef (int_of_string (String.sub s 2 (String.length s - 3))) )
  | 2 -> (
# 707 "pxp_wlex_utf8_01.mll"
        let s = Lexing.lexeme lexbuf in
	CRef (int_of_string ("0x" ^ String.sub s 3 (String.length s - 4))) )
  | 3 -> (
# 710 "pxp_wlex_utf8_01.mll"
        raise(WF_error("The character '&' must be written as '&amp;'")) )
  | 4 -> (
# 712 "pxp_wlex_utf8_01.mll"
        CharData ""  (* TODO *) (* (Lexing.lexeme lexbuf) *) )
  | 5 -> (
# 714 "pxp_wlex_utf8_01.mll"
        CRef 32 )
  | 6 -> (
# 716 "pxp_wlex_utf8_01.mll"
        CRef(-1)   (* A special case *)
      )
  | 7 -> (
# 719 "pxp_wlex_utf8_01.mll"
        CRef 32 )
  | 8 -> (
# 721 "pxp_wlex_utf8_01.mll"
        CRef 32 )
  | 9 -> (
# 723 "pxp_wlex_utf8_01.mll"
        
	(* Depending on the situation, '<' may be legal or not: *)
	tok_CharDataLT
      )
  | 10 -> (
# 728 "pxp_wlex_utf8_01.mll"
        Eof )
  | 11 -> (
# 730 "pxp_wlex_utf8_01.mll"
        raise Netconversion.Malformed_code )
  | _ -> failwith "lexing: empty token [scan_content_string]"

and scan_tag_eb_att engine lexbuf = 
  match engine lex_tables 14 lexbuf with
    0 -> (
# 743 "pxp_wlex_utf8_01.mll"
        fun d ->
	  let s = Lexing.lexeme lexbuf in
	  (ERef_att (String.sub s 1 (String.length s - 2)), Tag_eb_att d) 
      )
  | 1 -> (
# 748 "pxp_wlex_utf8_01.mll"
        fun d ->
	  let s = Lexing.lexeme lexbuf in
	  (CRef (int_of_string (String.sub s 2 (String.length s - 3))),
	   Tag_eb_att d)
      )
  | 2 -> (
# 754 "pxp_wlex_utf8_01.mll"
        fun d ->
	  let s = Lexing.lexeme lexbuf in
	  (CRef (int_of_string ("0x" ^ String.sub s 3 (String.length s - 4))),
	   Tag_eb_att d)
      )
  | 3 -> (
# 760 "pxp_wlex_utf8_01.mll"
        fun _ ->
          raise(WF_error("The character '&' must be written as '&amp;'")) )
  | 4 -> (
# 763 "pxp_wlex_utf8_01.mll"
        fun d ->
          tok_CharDataSPACE, Tag_eb_att d )
  | 5 -> (
# 766 "pxp_wlex_utf8_01.mll"
        fun d ->
	  LineEnd_att "  ", Tag_eb_att d )
  | 6 -> (
# 769 "pxp_wlex_utf8_01.mll"
        fun d ->
          LineEnd_att " ", Tag_eb_att d )
  | 7 -> (
# 772 "pxp_wlex_utf8_01.mll"
        fun d ->
          LineEnd_att " ", Tag_eb_att d )
  | 8 -> (
# 775 "pxp_wlex_utf8_01.mll"
        fun d ->
	  (* Depending on the situation, '<' may be legal or not: *)
	  tok_CharDataLT, Tag_eb_att d
      )
  | 9 -> (
# 780 "pxp_wlex_utf8_01.mll"
        function
          true  -> DQuote, Tag_eb
        | false -> tok_CharDataQUOT, Tag_eb_att false
      )
  | 10 -> (
# 785 "pxp_wlex_utf8_01.mll"
        function
          true  -> tok_CharDataAPOS, Tag_eb_att true
        | false -> SQuote, Tag_eb
      )
  | 11 -> (
# 790 "pxp_wlex_utf8_01.mll"
        fun d -> LLcurly, Tag_eb_att d )
  | 12 -> (
# 792 "pxp_wlex_utf8_01.mll"
        fun d -> Lcurly, Tag_eb_att d )
  | 13 -> (
# 794 "pxp_wlex_utf8_01.mll"
        fun d -> RRcurly, Tag_eb_att d )
  | 14 -> (
# 796 "pxp_wlex_utf8_01.mll"
        fun d -> Rcurly, Tag_eb_att d )
  | 15 -> (
# 798 "pxp_wlex_utf8_01.mll"
        fun d -> CharData (Lexing.lexeme lexbuf), Tag_eb_att d )
  | 16 -> (
# 800 "pxp_wlex_utf8_01.mll"
        fun d -> Eof, Tag_eb_att d )
  | 17 -> (
# 802 "pxp_wlex_utf8_01.mll"
        fun _ -> raise Netconversion.Malformed_code )
  | _ -> failwith "lexing: empty token [scan_tag_eb_att]"

and scan_name_string engine lexbuf = 
  match engine lex_tables 15 lexbuf with
    0 -> (
# 812 "pxp_wlex_utf8_01.mll"
        Name (Lexing.lexeme lexbuf) )
  | 1 -> (
# 814 "pxp_wlex_utf8_01.mll"
        Ignore )
  | 2 -> (
# 816 "pxp_wlex_utf8_01.mll"
        Nametoken (Lexing.lexeme lexbuf) )
  | 3 -> (
# 818 "pxp_wlex_utf8_01.mll"
        Eof )
  | 4 -> (
# 820 "pxp_wlex_utf8_01.mll"
        CharData (Lexing.lexeme lexbuf) )
  | 5 -> (
# 822 "pxp_wlex_utf8_01.mll"
        raise Netconversion.Malformed_code )
  | _ -> failwith "lexing: empty token [scan_name_string]"

and scan_ignored_section engine lexbuf = 
  match engine lex_tables 16 lexbuf with
    0 -> (
# 830 "pxp_wlex_utf8_01.mll"
        tok_Conditional_begin__Ignored )
  | 1 -> (
# 832 "pxp_wlex_utf8_01.mll"
        tok_Conditional_end__Ignored )
  | 2 -> (
# 834 "pxp_wlex_utf8_01.mll"
        tok_Ignore__Ignored )
  | 3 -> (
# 836 "pxp_wlex_utf8_01.mll"
        tok_Ignore__Ignored )
  | 4 -> (
# 838 "pxp_wlex_utf8_01.mll"
        tok_Ignore__Ignored )
  | 5 -> (
# 840 "pxp_wlex_utf8_01.mll"
        tok_Eof__Ignored )
  | 6 -> (
# 842 "pxp_wlex_utf8_01.mll"
        tok_Ignore__Ignored )
  | 7 -> (
# 844 "pxp_wlex_utf8_01.mll"
        tok_Ignore__Ignored )
  | 8 -> (
# 846 "pxp_wlex_utf8_01.mll"
        tok_Ignore__Ignored )
  | 9 -> (
# 848 "pxp_wlex_utf8_01.mll"
        tok_Ignore__Ignored )
  | 10 -> (
# 850 "pxp_wlex_utf8_01.mll"
        tok_Ignore__Ignored )
  | 11 -> (
# 852 "pxp_wlex_utf8_01.mll"
        raise Netconversion.Malformed_code )
  | _ -> failwith "lexing: empty token [scan_ignored_section]"

and scan_for_crlf engine lexbuf = 
  match engine lex_tables 17 lexbuf with
    0 -> (
# 860 "pxp_wlex_utf8_01.mll"
        tok_CharDataLF )
  | 1 -> (
# 862 "pxp_wlex_utf8_01.mll"
        tok_CharDataLF )
  | 2 -> (
# 864 "pxp_wlex_utf8_01.mll"
        tok_CharDataLF )
  | 3 -> (
# 866 "pxp_wlex_utf8_01.mll"
        CharData (Lexing.lexeme lexbuf) )
  | 4 -> (
# 868 "pxp_wlex_utf8_01.mll"
        Eof )
  | _ -> failwith "lexing: empty token [scan_for_crlf]"

;;

