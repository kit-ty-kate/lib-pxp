<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE readme SYSTEM "readme.dtd" [

<!--
<!ENTITY url.ocaml           "http://caml.inria.fr/">
<!ENTITY url.xml-spec        "http://www.w3.org/TR/1998/REC-xml-19980210.html">
<!ENTITY url.jclark-xmltdata "ftp://ftp.jclark.com/pub/xml/xmltest.zip">
<!ENTITY url.gps-ocaml-download "http://people.darmstadt.netsurf.de/ocaml">
<!ENTITY url.markup-download    "&url.gps-ocaml-download;/markup-0.1.tar.gz">
<!ENTITY person.gps             '<a
  href="mailto:Gerd.Stolpmann@darmstadt.netsurf.de">Gerd Stolpmann</a>'>
-->

<!ENTITY % common SYSTEM "common.xml">
%common;

<!-- Special HTML config: -->
<!ENTITY % readme:html:up '<a href="../..">up</a>'>

<!ENTITY % config SYSTEM "config.xml">
%config;

]>

<readme title="Development of PXP">
  <sect1>
    <title>PXP</title>
    <p>
<em>PXP</em> is a validating parser for XML-1.0 which has been written
entirely in Objective Caml. <em>This page contains development information
for PXP; if you are looking for the stable distribution, please go
<a href="&url.pxp-project;">here</a>.</em>
</p>
  </sect1>

  <sect1>
    <title>Download</title>
    <ul>
      <li><p><em>Current stable release:</em> 
<a href="&url.pxp-download;">&release.pxp;</a></p>
      </li>
      <li><p><em>Current development version:</em> 
<a href="&url.pxp-download-dev;">&release.pxp-dev;</a>
<!--There is currently no development version! -->
</p>
      </li>
    </ul>
  </sect1>

  <sect1>
    <title>Version History</title>
    <ul>
      <li>
        <p><em>1.2.1:</em> Revised documentation</p>
        <p>Addition: Pxp_event.unwrap_document</p>
      </li>
      <li><p><em>1.2.0test*:</em> New ~minimization option for the
        [write] and [display] methods (user wish).</p>
        <p>Improvement: better control what is printed as DTD for
           document#write and #display</p>
        <p>Fix: [Pxp_document.liquefy] terminates now when invoked
           only on a subtree of a document</p>
        <p>Cleaned up the code a bit so fewer warnings are emitted 
           in the build.</p>
	<p>Ported pxp-pp to O'Caml 3.10</p>
      </li>

      <li><p><em>1.1.96:</em> Works now for O'Caml 3.09, too.</p>
	 <p>Fix: The "root element check" is disabled
         in Pxp_dtd. It did not work together with namespaces.</p>
         <p>Pxp_validate: Fix for namespace mode</p>
      </li>

      <li><p><em>1.1.95:</em> Addition of ulex lexing.</p>
	<p>Fix in Pxp_reader.combine.</p>
	<p>Revised namespace handling: There are now namespace_scope
	  objects keeping the scoping structure of the namespaces.
	  The namespace_info stuff has been removed. The "display"
	  methods can print XML while respecting the scoping structure.
	</p>
	<p>New exceptions Namespace_not_managed, Namespace_prefix_not_managed,
	  Namespace_not_in_scope (all replacing Not_found). Methods
	  of namespace_manager may raise these exceptions.
	</p>
	<p>The event-based representation of XML is now symmetrical
	  to the tree-based representation, such that it is possible
	  to convert one representation into the other without loss.
	  The type of events had to be changed to achieve this effect.
	</p>
	<p>The new module Pxp_event contains functions for the event-based
	  representation.</p>
	<p>Addition of pxp-pp, the PXP preprocessor.</p>
	<p><em>This release requires Ocamlnet 0.98. You should also
	    install ulex. There are no longer precompiled wlex lexers
	    (use ulex instead).</em></p>
      </li>

      <li><p><em>1.1.94.2:</em> Again fixes for the combination of
3.07/wlex</p>
      </li>

      <li><p><em>1.1.94.1:</em> Fixes for 3.07 concerning the
pregenerated wlexers. - New: Pxp_document.build_node_tree</p>
      </li>

      <li><p><em>1.1.94:</em> The Pxp_reader module has been
completely rewritten. This fixes some problems with relative
URLs. - Pxp_yacc has been split up into four modules: Pxp_tree_parser
contains now the parser API returning object trees, Pxp_dtd_parser
is the parser API returning DTDs, Pxp_ev_parser is the event-based
API, and Pxp_core_parser is the core of the parser. Pxp_yacc is
still available as compatibility API. As part of the module
redesign, Pxp_types includes now parts of its interface from
Pxp_core_types_type. I hope this style of programming is 
comprehensible. - I think PXP can now compiled with CVS releases
of O'Caml. - It is now possible to turn warnings into errors. -
The event-based parser can now preprocess namespaces. Furthermore,
there are normalization filters.</p>
      </li>

      <li><p><em>1.1.93:</em> This is a bugfix release. Sometimes
files were not closed in previous versions, but now they are.
There were debug statements in the pull parser code, I have
removed them. Finally, some errors in the Makefiles have been
corrected.</p>
      </li>

      <li><p><em>1.1.92:</em> The whole lexing stuff has been
restructured. There is a new tool, lexpp, that generates the lexers
from only five files. Furthermore, much more 8 bit character sets
are now supported as internal encodings. In previous versions of
PXP, the internal representation of the XML trees was restricted
to either UTF-8 or ISO-8859-1. Now, a number of additional
encodings are supported, including the whole ISO-8859 series.
</p>
	<p>Bugfix: If the processing instruction &lt;?xml...?&gt;
occurs in the middle of the XML document, version 1.1.91 will
immediately stop parsing, and ignore the rest of the file. This
is now fixed.</p></li>

      <li><p><em>1.1.91:</em> The curly braces can now even be used
inside attributes, and escape from normal XML parsing.</p>

	<p>There is a new entry point Entry_expr for event-based
parsing that expects either a single element, a single processing
instruction, or a single comment, or whitespace. This allows more
fine-grained control of what is parsed.</p>

	<p>There is now a "pull parser". In contrast to the "push
parser" introduced in 1.1.90, the calling order of parser and parser user
have been inverted, i.e. the user calls the parser to get ("pull") the next
event instead of letting the parser call back a user function ("push").
An interesting application is that O'Caml's lazy streams can be used
to analyze events. An example can be found in examles/pullparser.</p>
	<p>Pull parsing is not yet well-tested!</p>
      </li>

      <li><p><em>1.1.90:</em> This version introduces a new event-based
interface in Pxp_yacc. For start tags, end tags, data strings, and several
other things that are found in the XML source so-called events are generated,
and a user function is called for every event. See the directory
examples/eventparser for examples.</p>
	<p>Another innovation is support for curly braces as escape characters.
Inside elements, the left curly brace escapes from XML parsing and starts
a foreign parser until the matching right curly brace is found:

<code>
<![CDATA[<element> ... { foreign syntax } ... </element>]]>
</code>

The curly braces are borrowed from the XQuery draft standard.
They cannot yet be used inside attribute values. Curly braces are mostly
useful in conjunction with event-based parsing, because it is not yet
possible to include the "value" of the curly brace expression into
XML trees.</p>

	<p>It is even possible to call the XML parser from the foreign
parser as subparser. However, there not yet enough entry points for the
event-based parser (e.g. you cannot parse just the following processing
instruction, only misc* element misc* or whole documents are possible).
</p>

	<p>A long-standing bug has been found in the entity layer.
When an external entity A opens an external entity B, and B opens C,
relative paths of C have been interpreted wrong.</p>
      </li>

<!--
      <li><p><em>1.1:</em> This is the new stable release!</p></li>
      <li><p><em>1.0.99:</em></p>
	<p>Again a big change. First of all, the directory hierarchy has
been modified. You find now all installed modules in "src", and all 
tools in "tools", and so on. The new hierarchy makes it simpler to
add optional modules.</p>
	<p>For similar reasons, the package structure has changed, too.
Instead of one package "pxp", there are now up to five packages:
"pxp-engine", "pxp-lex-iso88591", "pxp-lex-utf8", "pxp-wlex", "pxp".
Which packages are selected and compiled depends on the result of the
"configure" run (which is new, too).</p>
	<p>The namespace support has been completed. The Pxp_marshal and
Pxp_codewriter modules can encode/decode namespace information. Namespace
syntax is now fully checked. The namespace_manager class has been moved
from Pxp_document to Pxp_dtd, and it is now considered as a new property
of the DTD. There is a new processing instruction: &lt;?pxp:dtd namespace
...?&gt; (see EXTENSIONS).</p>
	<p>More important, some design flaws in Pxp_document have been
fixed. In previous versions of PXP, it was a bit unclear which methods
of the "node" classes are actually involved in validation and which not.
Pxp_document.mli contains a discussion of this issue (and the
changes in detail).</p>
	<p>The "node" classes have some new methods, allowing simpler
in-place modification of node trees.</p>
	<p>There are now functions in Pxp_document stripping whitespace
and normalizing trees.</p>
	<p>The version number of PXP is now 1.0.99, as this version is a
release candidate. The manual still needs updates, and some of the
regression tests needs to be fixed. The release of PXP 1.1 is expected
to happen at the end of June.</p>
      </li>
      <li><p><em>1.0.98.6:</em></p>
	<p>This is a bigger change, including an initial implementation of
namespaces and some cleanup in Pxp_document. In particular, the following
modifications have been done:</p>
	<p>In Pxp_document, there is now a separate class for every node
type. You must now instantiate comment_impl in order to get a comment node
(same applies to super_root_impl, pinstr_impl). It is no longer possible to
instantiate element_impl in these cases (leads to error message that the 
method internal_init_other is not available).</p>
	<p>Namespaces: PXP implements namespaces by a technique called
"prefix normalization". This technique simplifies namespaces a lot and makes
them as compatible as possible with non-namespace processing. As defined 
by W3C, namespaces are declared by a namespace URI (a unique identifier) but
are accessed using a shorter namespace prefix. The problem is that the prefixes
need not to be unique, even within a single document. To address this problem
and to avoid complications, PXP _rewrites_ the prefixes while the document
is being parsed such that the application using PXP only sees unique 
prefixes. This means that every prefix corresponds to exactly one namespace
URI once the document has been parsed by PXP. The mapping between the rewritten
prefixes (called normprefixes) and the namespace URI is managed by a 
namespace_manager (defined in Pxp_document). In order to control the names of
the normprefixes it is possible to fill the namespace_manager with 
(normprefix, uri) pairs before the parser is called. This results in a 
programming style where it is still possible to identify element types by
a single string (and not by an expanded_name as suggested in some W3C 
standards). For example, in order to find out whether node x is a HTML anchor,
it is sufficient to check whether x # node_type = T_element "html:a", and not
necessary to perform the much more complicated operation
x # localname = "a" &amp;&amp; x # namespace_uri = "http://www.w3c.org/TR/xhtml".</p>
	<p>Namespace normalization has the advantage that DTDs can declare
the XML objects using normalized prefixes.</p>
	<p>In order to activate namespace processing, the following
modifications to existing code are sufficient: (1) Create a namespace_manager
(2) Set the Pxp_yacc.config label enable_namespace_processing to the
namespace manager object (3) Use namespace_element_impl instead of
element_impl. After these steps have been carried out, the application sees
normalized element and attribute names (instead of unprocessed ones), and
the additional namespace methods of namespace_element_impl are available
(e.g. method namespace_uri to get the URI of the namespace).</p>
	<p>The namespace support is currently very experimental; your comments
are welcome. There are some known problems: (1) Pxp_marshal and Pxp_codewriter
have not yet been updated for namespaces, they may or may not work for your
application; (2) It is not checked whether element and attribute names contain
only one colon; (3) If you do not set the namespace_manager manually, PXP
simply chooses the first occurrence of a prefix as its normalized prefix.
If you do not work with explit prefixes but only with default prefixes
(using attribute xmlns="some uri"), PXP maps these to the normprefix
"default" - this might not be what you want.</p>
      </li>

      <li><p><em>1.0.98.5:</em></p>
	<p>Bugfix in Pxp_reader.combine.</p>
	<p>Some changes that could PXP make work under Cygwin.</p>
      </li>
      <li><p><em>1.0.98.4:</em></p>
	<p>New support for PUBLIC identifiers in Pxp_reader: The functions
lookup_public_id_as_file and lookup_public_id_as_string lookup PUBLIC
identifiers in a catalog (implemented as associative list). However, there
is still no way to load a catalog from a file.</p>
	<p>There are also catalogs for SYSTEM identifiers.</p>
	<p>The behaviour of Pxp_reader.combine can be better controlled
by a mode argument.</p>
	<p>Removed the -p switch from ocamlopt invocations.</p>
      </li>
      <li><p><em>1.0.98.3:</em></p>
	<p>A single fix (again line numbering) that only applies to the
ocamlopt version. The symptom was an "array-out-of-bounds" runtime error.
</p>
      </li>

      <li><p><em>1.0.98.2:</em></p>
	<p>Corrects a bug with incorrect line numbering that was in
1.0.98.1.</p>
	<p>This version contains numerous optimizations, making the 
parser clearly faster. I had some gprof sessions, and it was possible
to reduce the amount of temporarily allocated memory. One important result is
that the option errors_with_line_numbers could be removed; line counting
is now very cheap.
</p>
      </li>

      <li><p><em>1.0.98.1:</em></p>
	<p>The memory consumption of the node objects has been reduced.</p>
	<p>There is now a string pool option in type Pxp_yacc.config which
makes it likely that equal strings share the same memory block.
This option is experimental.</p>

	<p>There is now support for Alains lexer generator wlex. This is
currently very experimental. To enable wlex you must change the variable
LEX_IMPL in Makefile.conf and recompile everything.  wlex is available here:
http://www.eleves.ens.fr:8080/home/frisch/soft</p>

	<p>Pxp_marshal contains functions to (un)serialize node trees and
documents.  Loading the binary format is faster than parsing the XML source;
applications are inter-process communication, and loading constant XML texts
very quickly.</p>

	<p>Several bug fixes (but no serious bugs have been found yet).</p>
      </li>
-->
    </ul>
  </sect1>
</readme>

	