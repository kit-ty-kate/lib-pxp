<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE readme SYSTEM "readme.dtd" [

<!ENTITY % common SYSTEM "common.xml">
%common;

<!ENTITY m "<em>PXP</em>">

]>

<readme title="INSTALL - PXP, the XML parser for O'Caml">
  <sect1><title>The "pxp" package</title>
    <sect2><title>Prerequisites</title>
      <p>
&m; requires that the <a href="&url.netstring-project;">netstring package
</a> is already installed. &m; works
only with O'Caml 3.00 (the support for 2.04 has been dropped).
The installation
procedure defined in the Makefile requires <a
href="&url.findlib-project;">findlib</a> to work<footnote><em>Findlib</em> is a
package manager, see the file ABOUT-FINDLIB.</footnote>. &m; may
now be optionally compiled with support for Alain Frischs patch of
ocamllex called <a href="&url.ocaml.frisch;">"wlex"</a>.
</p>
    </sect2>

    <sect2><title>Configuration</title>
      <p>
<em>Beginning with PXP 1.1 it is necessary to configure the parser!</em>
</p>

      <p>
Configuration is very simple, and in almost all cases it is sufficient
to do
<code>
./configure
</code>
in the top level directory of the distribution. It is possible to turn
some options on or off using the -with-xxx and -without-xxx arguments.
You can get a list by invoking ./configure -help:
</p>

      <ul>
	<li>
	  <p>-with-lex-iso88591</p>
	  <p>Enables the lexical analyzer that works if the internal
representation of the strings is ISO-8859-1.</p>
	</li>
	<li>
	  <p>-with-lex-utf8</p>
	  <p>Enables the lexical analyzer that works if the internal
representation of the strings is UTF-8. Note that this analyzer is very big,
and that it takes some time to build it.</p>
	</li>
	<li>
	  <p>-with-wlex</p>
	  <p>Enables the lexical analyzer that works for both ISO-8859-1 and
UTF-8 as internal encodings, and that is based on Alain Frisch's wlex tool. It
is relatively small and almost as fast as the two other two analyzers. I
recommend it if it is ok to install another library. Note that you only need
the runtime part of wlex, and not the "wlex" command itself.</p>
	</li>
      </ul>

      <p>Note that you need at least one lexical analyzer to use PXP as
parser.</p>

    </sect2>

    <sect2><title>Compilation</title>
      <p>
The Makefile defines the following goals:
</p>
      <ul>
	<li>
	  <p>make all</p> <p>compiles with the bytecode compiler and creates
various bytecode archives (suffix .cma) and some bytecode objects (suffix .cmo)
in the directories below src.</p>
	</li>
	<li>
	  <p>make opt</p>
	  <p>compiles with the native compiler and creates various native
archives (suffixes .cmxa and .a) and some native objects (suffixes .cmx and .o)
in the directories below src.</p>
	</li>
      </ul>
    </sect2>

    <sect2><title>Installation</title>
      <p>
The Makefile defines the following goals:</p>
      <ul>
	<li>
	  <p>make install</p>
	  <p>installs the bytecode archives, the interface definitions, and if
present, the native archives in the default location of <em>findlib</em>.
Up to five packages may be installed: pxp, pxp-engine, pxp-lex-iso88591,
pxp-lex-utf8, pxp-wlex.
</p>
	</li>
	<li>
	  <p>make uninstall</p>
	  <p>removes any of the mentioned packages</p>
	</li>
      </ul>

<p>Note: Previous versions of PXP had a compatibility API for the
old "markup" distribution. This API is no longer supported. Upgrading
to the PXP API is not very difficult.</p>
    </sect2>

    <sect2>
      <title>Usage with the help of "findlib"</title>
      <p>You can refer to the parser as the findlib package "pxp":

<code>
ocamlfind ocamlc -package pxp ...
</code>

Using "pxp" includes as much features of the parser as available, i.e.
everything that has been configured.</p>

<p>By default, the UTF-8 support modules will be linked in (if available). If
you do not need them, you may define the predicate "pxp_without_utf8", which
causes that the UTF-8 relevant parts are not linked with your program; the
difference in size is about 1 MB (unless you have the wlex lexer):

<code>
ocamlfind ocamlc -package pxp -predicates pxp_without_utf8 ...
</code>

Note that you can also reduce the size of the resulting executable by
specifying Netstring-related predicates (e.g. netstring_only_iso); see the
documentation of Netstring.
</p>

      <p>Alternatively, you can select the installed packages individually.
For example,

<code>
ocamlfind ocamlc -package pxp-engine,pxp-lex-iso88591 ...
</code>

will only use "pxp-engine" (the core package) and the lexical analyzer
"pxp-lex-iso88591", even if you have installed more PXP packages.</p>
    </sect2>

    <sect2>
      <title>Linking with the archives directly</title>

      <p>The following archives and objects may be used:</p>
      <ul>
	<li><p><em>pxp_engine.cma:</em> The core of PXP (always
needed)</p></li>
	<li><p><em>pxp_lex_iso88591.cma:</em> The ocamllex-based
lexical analyzer if you want to internally represent texts as
ISO-8859-1.</p></li>
	<li><p><em>pxp_lex_link_iso88591.cmo:</em> Registers
pxp_lex_iso88591 as lexer.</p></li>
	<li><p><em>pxp_lex_utf8.cma:</em> The ocamllex-based
lexical analyzer if you want to internally represent texts as
UTF-8.</p></li>
	<li><p><em>pxp_lex_link_utf8.cmo:</em> Registers
pxp_lex_utf8 as lexer.</p></li>
	<li><p><em>pxp_wlex.cma:</em> The wlex-based
lexical analyzer that works for both ISO-8859-1 and UTF-8
and results in smaller executables (but needs wlex).</p></li>
	<li><p><em>pxp_wlex_link.cmo:</em> Registers
pxp_wlex as lexer.</p></li>
	<li><p><em>pxp_top.cmo:</em> Loading this module into
the toploop installs several printers for PXP types.</p></li>
      </ul>

<p>Note that you need at least one of the lexical analyzers if you want
to parse XML texts. You do not need them if your program uses other
features of PXP but not parsing. The archives containing the lexers are
only linked into your executable if you also link the corresponding
"register module".</p>
    </sect2>

  </sect1>

  <sect1><title>The examples</title>
    <p>
In the "examples" directory you find several applications of &m;. They require
that &m; has been installed using <em>findlib</em>. See the Makefiles in the
directories for descriptions of "make" goals.
</p>
  </sect1>

  <sect1><title>Trouble shooting</title>
    <sect2><title>Solaris</title>
      <p>
The "make" utility of Solaris does not work properly enough; there is a bug
in it that prevents the so-called suffix rules from being recognized. There
are two solutions:</p>
      <ul>
	<li><p>Install GNU make and use it instead of Solaris make. This is
the recommended way to solve the problem, as GNU make can process almost
every Makefile from open source projects, and you will never have problems
with building software again.</p></li>
	<li><p>Add the following lines to Makefile.rules:
	  <code>
%.cmx: %.ml
        $(OCAMLOPT) -c $&lt;

%.cmo: %.ml
        $(OCAMLC) -c $&lt;

%.cmi: %.mli
        $(OCAMLC) -c $&lt;

%.ml: %.mll
        ocamllex $&lt;
</code>
</p></li>
      </ul>
    </sect2>
  </sect1>
</readme>