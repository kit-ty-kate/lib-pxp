<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE readme SYSTEM "readme.dtd" [

<!--
<!ENTITY url.ocaml           "http://caml.inria.fr/">
<!ENTITY url.xml-spec        "http://www.w3.org/TR/1998/REC-xml-19980210.html">
<!ENTITY url.jclark-xmltdata "ftp://ftp.jclark.com/pub/xml/xmltest.zip">
<!ENTITY url.gps-ocaml-download "http://people.darmstadt.netsurf.de/ocaml">
<!ENTITY url.markup-download    "&url.gps-ocaml-download;/markup-0.1.tar.gz">
<!ENTITY person.gps             '<a
  href="mailto:Gerd.Stolpmann@darmstadt.netsurf.de">Gerd Stolpmann</a>'>
-->

<!ENTITY % common SYSTEM "common.xml">
%common;

<!-- Special HTML config: -->
<!ENTITY % readme:html:up '<a href="../..">up</a>'>

<!ENTITY % config SYSTEM "config.xml">
%config;

]>

<readme title="README - PXP, the XML parser for O'Caml">
  <sect1>
    <title>Abstract</title>
    <p>
<em>PXP</em> is an XML parser for O'Caml. It represents the parsed
document either as tree or as stream of events. In tree mode, it is
possible to validate the XML document against a DTD.
</p>

<p>
The acronym PXP means Polymorphic XML Parser. This name reflects the
ability to create XML trees with polymorphic type parameters.
</p>
  </sect1>

  <sect1>
    <title>Download</title>
    <p>
You can download <em>PXP</em> as gzip'ed <a
href="&url.pxp-download;">tarball</a>. The parser needs the <a
href="&url.ocamlnet-project;">Ocamlnet</a> package (0.9.3). Note that PXP
requires O'Caml 3.09 or newer.
</p>

    <p>
Information about the latest development version is available
<a href="&url.pxp-project-dev;">here</a>.
</p>
  </sect1>

  <sect1>
    <title>PXP Reference</title>
    <p>
The manual is included in the distribution as bunch of HTML files.  An
online version can be found <a href="&url.pxp-manual;">here</a>.
</p>
  </sect1>

  <sect1>
    <title>Author, Credits, Copying</title>
    <p>
<em>PXP</em> has been written by &person.gps;; it contains contributions by
Claudio Sacerdoti Coen. You may copy it as you like,
you may use it even for commercial purposes as long as the license conditions
are respected, see the file LICENSE coming with the distribution. It allows
almost everything.
</p>

    <p>Thanks also to Alain Frisch and Haruo Hosoya for discussions and bug
reports.</p>
  </sect1>

  <sect1>
    <title>Description</title>
    <p>
<em>PXP</em> is a validating XML parser for <a
href="&url.ocaml;">O'Caml</a>. It strictly complies to the
<a href="&url.xml-spec;">XML-1.0</a> standard.
</p>

    <p>The parser is simple to call, usually only one statement (function
call) is sufficient to parse an XML document and to represent it as object
tree.</p>

    <p>
Once the document is parsed, it can be accessed using a class interface.
The interface allows arbitrary access including transformations. One of
the features of the document representation is its polymorphic nature;
it is simple to add custom methods to the document classes. Furthermore,
the parser can be configured such that different XML elements are represented
by objects created from different classes. This is a very powerful feature,
because it simplifies the structure of programs processing XML documents.
</p>

    <p>
Note that the class interface does not comply to the DOM standard. It was not a
development goal to realize a standard API (industrial developers can this much
better than I); however, the API is powerful enough to be considered as
equivalent with DOM. More important, the interface is compatible with the
XML information model required by many XML-related standards.
</p>

<p>There is now also an event-oriented interface comparable to SAX.
PXP also supports the popular pull parsing model.
</p>

    <sect2>
      <title>Detailed feature list</title>

      <ul>
	<li><p>The XML instance is validated against the DTD; any violation of
a validation constraint leads to the rejection of the instance. The validator
has been carefully implemented, and conforms strictly to the standard. If
needed, it is also possible to run the parser in a well-formedness mode.</p>
	</li>
	<li><p>If possible, the validator applies a deterministic finite
automaton to validate the content models. This ensures that validation can
always be performed in linear time. However, in the case that the content
models are not deterministic, the parser uses a backtracking algorithm which
can be much slower. - It is also possible to reject non-deterministic content
models.</p>
	</li>
	<li><p>In particular, the validator also checks the complicated rules
whether parentheses are properly nested with respect to entities, and whether
the standalone declaration is satisfied. On demand, it is checked whether the
IDREF attributes only refer to existing nodes.</p>
	</li>
	<li><p>Entity references are automatically resolved while the XML text
is being scanned. It is not possible to recognize in the object tree where a
referenced entity begins or ends; the object tree only represents the logical structure.</p>
	</li>
	<li><p>External entities are loaded using a configurable resolver
infrastructure. It is possible to connect the parser with an arbitrary XML source.</p>
	</li>
	<li><p>The parser can read XML text encoded in a variety of character
sets. Independent of this, it is possible to choose the encoding of the
internal representation of the tree nodes; the parser automatically converts
the input text to this encoding. Currently, the parser supports UTF-8 and
ISO-8859-1 as internal encodings.</p>
	</li>
	<li><p>The interface of the parser has been designed such that it is
best integrated into the language O'Caml. The first goal was simplicity of
usage which is achieved by many convenience methods and functions, and by
allowing the user to select which parts of the XML text are actually
represented in the tree. For example, it is possible to store processing
instructions as tree nodes, but the parser can also be configured such that
these instructions are put into hashtables. The information model is compatible
with the requirements of XML-related standards such as XPath.</p>
	</li>
	<li><p>In particular, the node tree can optionally contain or leave out
processing instructions and comments. It is also possible to generate a "super
root" object which is the parent of the root element. The attributes of
elements are normally not stored as nodes, but it is possible to get them
wrapped into nodes.</p>
	</li>
	<li><p>The powerful type system of O'Caml makes it possible that
the parser supports polymorphism based on the element types, i.e. it can
be configured that the parser selects different classes to represent
different element types. Note that no generator is needed for this feature.
</p></li>
	<li><p>There is also an interface for DTDs; you can parse and access
sequences of declarations. The declarations are fully represented as recursive
O'Caml values.
</p>
	</li>
	<li><p>Since PXP 1.1, the parser supports namespaces. This has been
implemented using a technique called "prefix normalization", i.e. while
parsing the namespace prefixes are changed (in a configurable way) such that
they become unique in the whole document (or document domain). This is again
a solution that is different from other parsers, but it allows a very
convenient style of processing namespaces while sticking strictly to the
XML standard. Another advantage of this solution is that DTDs can refer
to namespaces in a transparent way, i.e. it is possible to validate a
document against a DTD that uses different namespace prefixes for the
same namespaces.</p></li>
      </ul>
    </sect2>


    <sect2>
      <title>Recent Changes</title>
      <ul>
      <li>
        <p><em>1.2.2:</em> Fixing the interaction of catalog and file 
	  resolution.</p>
	<p>Fix because of a change in Ocamlnet-3.3.1</p>
      </li>

      

      <li>
        <p><em>1.2.1:</em> Revised documentation</p>
        <p>Addition: Pxp_event.unwrap_document</p>
        <p>Addition: Pxp_dtd.Entity.lookup</p>
        <p>Addition: node method entity_id</p>
        <p>Addition: Pxp_event.close_entities</p>
        <p>Removed: Pxp_core_types_type, Pxp_type_anchor. Pxp_core_types
          has now three submodules A, S, I taking over the roles</p>
        <p>Removed: E_pinstr_member. Instead, E_pinstr events are emitted</p>
        <p>Renaming, and addition: `Entry_content has been renamed to
           `Entry_element_content. A new `Entry_content with different
           semantics has been added, now conforming to a standard production.
        </p>
        <p>Improvement: The parser also accepts a BOM as UTF-8 sequence.
           Also, the autodetection of the encoding for UTF-16 has been
           enhanced</p>
        <p>Fix: Pxp_marshal module also keeps namespace scope objects</p>
        <p>Addition: method lexbuf in lexer_obj</p>
      </li>
      <li><p><em>1.2.0test*:</em> New ~minimization option for the
        [write] and [display] methods (user wish).</p>
        <p>Improvement: better control what is printed as DTD for
           document#write and #display</p>
        <p>Fix: [Pxp_document.liquefy] terminates now when invoked
           only on a subtree of a document</p>
        <p>Cleaned up the code a bit so fewer warnings are emitted 
           in the build.</p>
	<p>Ported pxp-pp to O'Caml 3.10</p>
      </li>

      <li><p><em>1.1.96:</em> Works now for O'Caml 3.09, too.</p>
	 <p>Fix: The "root element check" is disabled
         in Pxp_dtd. It did not work together with namespaces.</p>
         <p>Pxp_validate: Fix for namespace mode</p>
      </li>

      <li><p><em>1.1.95:</em> Addition of ulex lexing.</p>
	<p>Fix in Pxp_reader.combine.</p>
	<p>Revised namespace handling: There are now namespace_scope
	  objects keeping the scoping structure of the namespaces.
	  The namespace_info stuff has been removed. The "display"
	  methods can print XML while respecting the scoping structure.
	</p>
	<p>New exceptions Namespace_not_managed, Namespace_prefix_not_managed,
	  Namespace_not_in_scope (all replacing Not_found). Methods
	  of namespace_manager may raise these exceptions.
	</p>
	<p>The event-based representation of XML is now symmetrical
	  to the tree-based representation, such that it is possible
	  to convert one representation into the other without loss.
	  The type of events had to be changed to achieve this effect.
	</p>
	<p>The new module Pxp_event contains functions for the event-based
	  representation.</p>
	<p>Addition of pxp-pp, the PXP preprocessor.</p>
	<p><em>This release requires Ocamlnet 0.98. You should also
	    install ulex. There are no longer precompiled wlex lexers
	    (use ulex instead).</em></p>
      </li>

      <li><p><em>1.1.94.2:</em> Again fixes for the combination of
3.07/wlex</p>
      </li>

      <li><p><em>1.1.94.1:</em> Fixes for 3.07 concerning the
pregenerated wlexers. - New: Pxp_document.build_node_tree</p>
      </li>

      <li><p><em>1.1.94:</em> The Pxp_reader module has been
completely rewritten. This fixes some problems with relative
URLs. - Pxp_yacc has been split up into four modules: Pxp_tree_parser
contains now the parser API returning object trees, Pxp_dtd_parser
is the parser API returning DTDs, Pxp_ev_parser is the event-based
API, and Pxp_core_parser is the core of the parser. Pxp_yacc is
still available as compatibility API. As part of the module
redesign, Pxp_types includes now parts of its interface from
Pxp_core_types_type. I hope this style of programming is 
comprehensible. - I think PXP can now compiled with CVS releases
of O'Caml. - It is now possible to turn warnings into errors. -
The event-based parser can now preprocess namespaces. Furthermore,
there are normalization filters.</p>
      </li>

      <li><p><em>1.1.93:</em> This is a bugfix release. Sometimes
files were not closed in previous versions, but now they are.
There were debug statements in the pull parser code, I have
removed them. Finally, some errors in the Makefiles have been
corrected.</p>
      </li>

      <li><p><em>1.1.92:</em> The whole lexing stuff has been
restructured. There is a new tool, lexpp, that generates the lexers
from only five files. Furthermore, much more 8 bit character sets
are now supported as internal encodings. In previous versions of
PXP, the internal representation of the XML trees was restricted
to either UTF-8 or ISO-8859-1. Now, a number of additional
encodings are supported, including the whole ISO-8859 series.
</p>
	<p>Bugfix: If the processing instruction &lt;?xml...?&gt;
occurs in the middle of the XML document, version 1.1.91 will
immediately stop parsing, and ignore the rest of the file. This
is now fixed.</p></li>

      <li><p><em>1.1.91:</em> The curly braces can now even be used
inside attributes, and escape from normal XML parsing.</p>

	<p>There is a new entry point Entry_expr for event-based
parsing that expects either a single element, a single processing
instruction, or a single comment, or whitespace. This allows more
fine-grained control of what is parsed.</p>

	<p>There is now a "pull parser". In contrast to the "push
parser" introduced in 1.1.90, the calling order of parser and parser user
have been inverted, i.e. the user calls the parser to get ("pull") the next
event instead of letting the parser call back a user function ("push").
An interesting application is that O'Caml's lazy streams can be used
to analyze events. An example can be found in examles/pullparser.</p>
	<p>Pull parsing is not yet well-tested!</p>
      </li>

      <li><p><em>1.1.90:</em> This version introduces a new event-based
interface in Pxp_yacc. For start tags, end tags, data strings, and several
other things that are found in the XML source so-called events are generated,
and a user function is called for every event. See the directory
examples/eventparser for examples.</p>
	<p>Another innovation is support for curly braces as escape characters.
Inside elements, the left curly brace escapes from XML parsing and starts
a foreign parser until the matching right curly brace is found:

<code>
<![CDATA[<element> ... { foreign syntax } ... </element>]]>
</code>

The curly braces are borrowed from the XQuery draft standard.
They cannot yet be used inside attribute values. Curly braces are mostly
useful in conjunction with event-based parsing, because it is not yet
possible to include the "value" of the curly brace expression into
XML trees.</p>

	<p>It is even possible to call the XML parser from the foreign
parser as subparser. However, there not yet enough entry points for the
event-based parser (e.g. you cannot parse just the following processing
instruction, only misc* element misc* or whole documents are possible).
</p>

	<p>A long-standing bug has been found in the entity layer.
When an external entity A opens an external entity B, and B opens C,
relative paths of C have been interpreted wrong.</p>
      </li>

        <li>
	  <p>Changed in 1.1.5:</p> <p>A packaging error in pxp-wlex has
been corrected. (This is the only change.)</p>
	</li>
	<li>
	  <p>Changed in 1.1.4:</p> <p>This is a bigger bug fix release
that addresses the following problems:</p>
	  <p>The parser does no longer show very bad performance when
large data nodes without line feeds are parsed.</p>
	  <p>Another performance problem with bigger DTDs has been solved,
too. Especially, the XHTML DTD can now be parsed quite quickly.</p>
	  <p>The interface Pxp_dtd.Entity has been extended, it is now possible
to access more properties of entities than before.</p>
	  <p>Pxp_marshal has been revised. It is now possible to recode the
input or output stream on the fly in order to change the character encoding.
Furthermore, the functions relocate_subtree and relocate_document allows one
to marshal an XML tree or a document, and to read the marshaled data 
immediately to create a copy of the original structure.</p>
	  <p>Some errors have been fixed in from_file. Especially, this
function will no longer raise the exception Malformed_URL if the current
working directory happens to be "/".</p>
	  <p>Pxp_document.strip_whitespace implements xml:space now correctly.
In previous versions, xml:space='default' was ignored when it occurred 
inside an element with xml:space='preserve'. Now the inner xml:space='default'
overrides the outer xml:space='preserve' as defined in the XML standard.</p> 
	</li>
	<li>
	  <p>Changed in 1.1.3:</p> <p>This release fixes a single
problem occurring when PXP is compiled with installed
netstring-0.10. (There is not any problem with netstring-0.91.)
</p>
	</li>
	<li>
	  <p>Changed in 1.1.2:</p> <p>Improved  write method
for whole documents. It can now also output a reference to an external
DTD.</p>
	  <p>PXP can be compiled with O'Caml 3.04.</p>
	</li>
	<li>
	  <p>Changed in 1.1.1:</p> <p>Minor changes for O'Caml 3.03-alpha.
The interfaces have not been modified.</p>
	</li>

	<li>
	  <p>Changed in 1.1:</p>
	  <p>The parser supports now namespaces.</p>
	  <p>Extended/updated Pxp_document interface. There is now a
	  separate class for every node type. It is now clear which
	  node methods validate and which do not validate. The node tree
	  can now be simpler modified (insert/delete).
	  It is now possible to start in
	  well-formedness mode and validate the XML tree later (as
	  a whole, or partially).</p>
	  <p>New functions for tree normalization, and whitespace
	  stripping.</p>
	  <p>The implementation of Pxp_document has been updated, too.
	  There are now many virtual classes, one class for one task.
	  The attribute representation has been improved. The overall
	  size of the document tree has been reduced.
	  </p>
	  <p>The parser is better in counting lines. The option
	  errors_with_line_numbers could be removed because the parser
	  is now fast enough that it does make sense to always count
	  lines.</p>
	  <p>There are now string pools that can save memory in some
	  situations.</p>
	  <p>New module Pxp_marshal allows marshalling of XML trees
	  over channels (faster than writing the tree and reparsing
	  it).</p>
	  <p>For the most important entity functions there is an
	  interface Pxp_document.Entity.</p>
	  <p>Although there are many extensions, the parser has been
	  sped up.</p>
	  <p>The parser has been divided up into several packages, and
	  the directory structure of the distribution has been cleaned
	  up.</p>
	  <p>It is possible to chose among several lexical analyzers.
	  One of them bases on Alain Frisch's wlex patch, which reduces
	  the size of executables if a UTF-8 parser is needed.</p>
	  <p>The parser works under Cygwin.</p>
	  <p>Of course several bug fixes. Note that most bugs have been
	  added in the development cycle between 1.0 and 1.1; only
	  very few problems have been detected in the 1.0 release. I
	  hope that 1.1 has similar quality.</p>
	</li>
<!--
	<li><p><em>1.0.99:</em></p>
	<p>Again a big change. First of all, the directory hierarchy has
been modified. You find now all installed modules in "src", and all 
tools in "tools", and so on. The new hierarchy makes it simpler to
add optional modules.</p>
	<p>For similar reasons, the package structure has changed, too.
Instead of one package "pxp", there are now up to five packages:
"pxp-engine", "pxp-lex-iso88591", "pxp-lex-utf8", "pxp-wlex", "pxp".
Which packages are selected and compiled depends on the result of the
"configure" run (which is new, too).</p>
	<p>The namespace support has been completed. The Pxp_marshal and
Pxp_codewriter modules can encode/decode namespace information. Namespace
syntax is now fully checked. The namespace_manager class has been moved
from Pxp_document to Pxp_dtd, and it is now considered as a new property
of the DTD. There is a new processing instruction: &lt;?pxp:dtd namespace
...?&gt; (see EXTENSIONS).</p>
	<p>More important, some design flaws in Pxp_document have been
fixed. In previous versions of PXP, it was a bit unclear which methods
of the "node" classes are actually involved in validation and which not.
Pxp_document.mli contains a discussion of this issue (and the
changes in detail).</p>
	<p>The "node" classes have some new methods, allowing simpler
in-place modification of node trees.</p>
	<p>There are now functions in Pxp_document stripping whitespace
and normalizing trees.</p>
	<p>The version number of PXP is now 1.0.99, as this version is a
release candidate. The manual still needs updates, and some of the
regression tests needs to be fixed. The release of PXP 1.1 is expected
to happen at the end of June.</p>
      </li>
      <li><p><em>1.0.98.6:</em></p>
	<p>This is a bigger change, including an initial implementation of
namespaces and some cleanup in Pxp_document. In particular, the following
modifications have been done:</p>
	<p>In Pxp_document, there is now a separate class for every node
type. You must now instantiate comment_impl in order to get a comment node
(same applies to super_root_impl, pinstr_impl). It is no longer possible to
instantiate element_impl in these cases (leads to error message that the 
method internal_init_other is not available).</p>
	<p>Namespaces: PXP implements namespaces by a technique called
"prefix normalization". This technique simplifies namespaces a lot and makes
them as compatible as possible with non-namespace processing. As defined 
by W3C, namespaces are declared by a namespace URI (a unique identifier) but
are accessed using a shorter namespace prefix. The problem is that the prefixes
need not to be unique, even within a single document. To address this problem
and to avoid complications, PXP _rewrites_ the prefixes while the document
is being parsed such that the application using PXP only sees unique 
prefixes. This means that every prefix corresponds to exactly one namespace
URI once the document has been parsed by PXP. The mapping between the rewritten
prefixes (called normprefixes) and the namespace URI is managed by a 
namespace_manager (defined in Pxp_document). In order to control the names of
the normprefixes it is possible to fill the namespace_manager with 
(normprefix, uri) pairs before the parser is called. This results in a 
programming style where it is still possible to identify element types by
a single string (and not by an expanded_name as suggested in some W3C 
standards). For example, in order to find out whether node x is a HTML anchor,
it is sufficient to check whether x # node_type = T_element "html:a", and not
necessary to perform the much more complicated operation
x # localname = "a" &amp;&amp; x # namespace_uri = "http://www.w3c.org/TR/xhtml".</p>
	<p>Namespace normalization has the advantage that DTDs can declare
the XML objects using normalized prefixes.</p>
	<p>In order to activate namespace processing, the following
modifications to existing code are sufficient: (1) Create a namespace_manager
(2) Set the Pxp_yacc.config label enable_namespace_processing to the
namespace manager object (3) Use namespace_element_impl instead of
element_impl. After these steps have been carried out, the application sees
normalized element and attribute names (instead of unprocessed ones), and
the additional namespace methods of namespace_element_impl are available
(e.g. method namespace_uri to get the URI of the namespace).</p>
	<p>The namespace support is currently very experimental; your comments
are welcome. There are some known problems: (1) Pxp_marshal and Pxp_codewriter
have not yet been updated for namespaces, they may or may not work for your
application; (2) It is not checked whether element and attribute names contain
only one colon; (3) If you do not set the namespace_manager manually, PXP
simply chooses the first occurrence of a prefix as its normalized prefix.
If you do not work with explit prefixes but only with default prefixes
(using attribute xmlns="some uri"), PXP maps these to the normprefix
"default" - this might not be what you want.</p>
      </li>

      <li><p><em>1.0.98.5:</em></p>
	<p>Bugfix in Pxp_reader.combine.</p>
	<p>Some changes that could PXP make work under Cygwin.</p>
      </li>
      <li><p><em>1.0.98.4:</em></p>
	<p>New support for PUBLIC identifiers in Pxp_reader: The functions
lookup_public_id_as_file and lookup_public_id_as_string lookup PUBLIC
identifiers in a catalog (implemented as associative list). However, there
is still no way to load a catalog from a file.</p>
	<p>There are also catalogs for SYSTEM identifiers.</p>
	<p>The behaviour of Pxp_reader.combine can be better controlled
by a mode argument.</p>
	<p>Removed the -p switch from ocamlopt invocations.</p>
      </li>
      <li><p><em>1.0.98.3:</em></p>
	<p>A single fix (again line numbering) that only applies to the
ocamlopt version. The symptom was an "array-out-of-bounds" runtime error.
</p>
      </li>

      <li><p><em>1.0.98.2:</em></p>
	<p>Corrects a bug with incorrect line numbering that was in
1.0.98.1.</p>
	<p>This version contains numerous optimizations, making the 
parser clearly faster. I had some gprof sessions, and it was possible
to reduce the amount of temporarily allocated memory. One important result is
that the option errors_with_line_numbers could be removed; line counting
is now very cheap.
</p>
      </li>

      <li><p><em>1.0.98.1:</em></p>
	<p>The memory consumption of the node objects has been reduced.</p>
	<p>There is now a string pool option in type Pxp_yacc.config which
makes it likely that equal strings share the same memory block.
This option is experimental.</p>

	<p>There is now support for Alains lexer generator wlex. This is
currently very experimental. To enable wlex you must change the variable
LEX_IMPL in Makefile.conf and recompile everything.  wlex is available here:
http://www.eleves.ens.fr:8080/home/frisch/soft</p>

	<p>Pxp_marshal contains functions to (un)serialize node trees and
documents.  Loading the binary format is faster than parsing the XML source;
applications are inter-process communication, and loading constant XML texts
very quickly.</p>

	<p>Several bug fixes (but no serious bugs have been found yet).</p>
      </li>
	<li>
	  <p>Changed in 1.0:</p>
	  <p>Support for document order.</p>
	</li>
	<li>
	  <p>Changed in 0.99.8:</p>
	  <p>Several fixes of bugs reported by Haruo Hosoya and Alain
Frisch.</p>
	  <p>The class type "node" has been extended: you can go directly to
the next and previous nodes in the list; you can refer to nodes by
position.</p>
	  <p>There are now some iterators for nodes: find, find_all,
find_element, find_all_elements, map_tree, iter_tree.</p>
	  <p>Experimental support for viewing attributes as nodes; I hope that
helps Alain writing his XPath evaluator.</p>
	  <p>The user's manual has been revised and is almost up to date.</p>
	</li>
	<li>
	  <p>Changed in 0.99.7:</p>
	  <p>There are now additional node types T_super_root, T_pinstr and
T_comment, and the parser is able to create the corresponding nodes.</p>
	  <p>The functions for character set conversion have been moved to
the Netstring package; they are not specific for XML.</p>
	</li>
	<li>
	  <p>Changed in 0.99.6:</p>
	  <p>Implemented a check on deterministic content models. Added
an alternate validator basing on a DFA. - This means that now all mandatory
features for an XML-1.0 parser are implemented! The parser is now substantially
complete.</p>
	</li>
	<li>
	  <p>Changed in 0.99.5:</p>
	  <p>The handling of ID and IDREF attributes has changed. The
index of nodes containing an ID attribute is now separated from the document.
Optionally the parser now checks whether the IDREF attributes refer to
existing elements.</p>
	  <p>The element nodes can optionally store the location in the
source XML code.</p>
	  <p>The method 'write' writes the XML tree in every supported
encoding. (Successor of 'write_compact_as_latin1'.)</p>
	  <p>Several smaller changes and fixes.</p>
	</li>
	<li>
	  <p>Changed in 0.99.4:</p>
	  <p>The module Pxp_reader has been modernized. The resolver classes
are simpler to use. There is now support for URLs.</p>
	  <p>The interface of Pxp_yacc has been improved: The type 'source'
is now simpler. The type 'domspec' has gone; the new 'spec' is opaque and
performs better. There are some new parsing modes.</p>
	  <p>Many smaller changes.</p>
	</li>
	<li>
	  <p>Changed in 0.99.3:</p>
	  <p>The markup_* modules have been renamed to pxp_*. There is a new
compatibility API that tries to be compatible with markup-0.2.10.</p>
	  <p>The type "encoding" is now a polymorphic variant.</p>
	</li>
        <li>
	  <p>Changed in 0.99.2:</p>
	  <p>Added checks for the constraints about the standalone
declaration.</p>
	  <p>Added regression tests about attribute normalization,
attribute checks, standalone checks.</p>
	  <p>Fixed some minor errors of the attribute normalization
function.</p>
	  <p>The bytecode/native archives are now separated in
a general part, in a ISO-8859-1-relevant part, and a UTF-8-relevant
part. The parser can again be compiled with ocamlopt.</p>
	</li>
        <li>
	  <p>Changed in 0.99.1:</p>
	  <p>In general, this release is an early pre-release of the
next stable version 1.00. I do not recommend to use it for serious
work; it is still very experimental!</p>
	  <p>The core of the parser has been rewritten using a self-written
parser generator.</p>
	  <p>The lexer has been restructured, and can now handle UTF-8
encoded files.</p>
	  <p>Numerous other changes.</p>
	</li>

	<li>
	  <p>Changed in 0.2.10:</p>
	  <p>Bugfix: in the "allow_undeclared_attributes" feature.</p>
	  <p>Bugfix: in the methods write_compact_as_latin1.</p>
	  <p>Improvement: The code produced by the codewriter module can be
faster compiled and with less memory usage.</p>
	</li>

	<li>
	  <p>Changed in 0.2.9:</p>
	  <p>New: The module Markup_codewriter generates for a given XML
tree O'Caml code that creates the same XML tree. This is useful for
applications which use large, constant XML trees.</p>
	  <p>New: Documents and DTDs have a method write_compact_as_latin1
that writes an XML tree to a buffer or to a channel. (But it is not a pretty
printer...)</p>
	  <p>Enhancement: If a DTD contains the processing instruction
<code>
&lt;?xml:allow_undeclared_attributes x?&gt;</code>
where "x" is the name of an already declared element it is allowed that
instances of this element type have attributes that have not been declared.
</p>
	  <p>New function Markup_types.string_of_exn that converts an
exception from Markup into a readable string.</p>
	  <p>Change: The module Markup_reader contains all resolvers.
The resolver API is now stable.</p>
	  <p>New parser modes processing_instructions_inline and
virtual_root that help locating processing instructions exactly (if needed).
</p>
	  <p>Many bugs regarding CRLF handling have been fixed.</p>
	  <p>The distributed tarball contains now the regression test suite.
</p>
	  <p>The manual has been extended (but it is still incomplete and
still behind the code).</p>
	</li>
	<li>
	  <p>Changed in 0.2.8:</p>
	  <p>A bit more documentation (Markup_yacc).</p>
	  <p>Bugfix: In previous versions, the second trial to refer to
an entity caused a Bad_character_stream exception. The reason was improper
re-initialization of the resolver object.</p>
	</li>
	<li>
	  <p>Changed in 0.2.7:</p>
	  <p>Added some methods in Markup_document.</p>
	  <p>Bugfix: in method orphaned_clone</p>
	</li>
	<li>
	  <p>Changed in 0.2.6:</p>
	  <p>Enhancement: The config parameter has a new component
"errors_with_line_numbers". If "true", error exceptions come with line numbers
(the default; and the only option in the previous versions); if "false"
the line numbers are left out (only character positions). The parser is 10 to
20 percent faster if the lines are not tracked.</p>
	  <p>Enhancement: If a DTD contains the processing instruction
<code>
&lt;?xml:allow_undeclared_elements_and_notations?&gt;</code>
it is allowed that
elements and notations are undeclared. However, the elements for which
declarations exist are still validated. The main effect is that the
keyword ALL in element declarations means that also undeclared elements
are permitted at this location.</p>
	  <p>Bugfix in method "set_nodes" of class Markup_document.node_impl.
</p>
	</li>
	<li>
	  <p>Changed in 0.2.5:</p>
	  <p>If the XML source is a string (i.e. Latin1 some_string is passed
to the parser functions as source), resolving did not work properly in
previous releases. This is now fixed.
</p>
	</li>
	<li>
	  <p>Changed in 0.2.4:</p>
	  <p>A problem with some kind of DTD that does not specify the name
of the root element was fixed. As a result, the "xmlforms" application works
again. Again thanks to Haruo.</p>
	  <p>Due to the XML specs it is forbidden that parameter entities are
referenced within the internal subset if the referenced text is not a
complete declaration itself. This is checked, but the check was too hard;
even in external entities referenced from the internal subset this rule
was enforced. This has been corrected; in external entities it is now possible
to use parameter entities in an unrestricted way.
</p>
	</li>
	<li>
	  <p>Changed in 0.2.3:</p>
	  <p>A fix for a problem when installing Markup on Solaris.
Haruo detected the problem.</p>
	</li>
	<li>
	  <p>Changed in 0.2.2:</p>
	  <p>A single bugfix: The parser did not reject documents where the
root element was not the element declared as root element. Again thanks
to Claudio.</p>
	</li>
	<li>
	  <p>Changed in 0.2.1:</p>
	  <p>A single bugfix which reduces the number of warnings. Thanks
to Claudio for detecting the bug.</p>
	</li>
	<li>
	  <p>Changed in 0.2:</p>
	  <p>
Much more constraints are checked in the 0.2 release than in 0.1. Especially
that entities are properly nested is now guaranteed; parsed entities now always
match the corresponding production of the grammar.</p>
	  <p>
Many weak checks have been turned into strong checks. For example, it is now
detected if the "version", "encoding", and "standalone" attributes of an XML
declaration are ordered in the right way.
</p>
	  <p>
The error messages have been improved.
</p>
	</li>
-->
      </ul>
    </sect2>
  </sect1>
</readme>

