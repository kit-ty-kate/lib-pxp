(* $Id$
 * ----------------------------------------------------------------------
 *
 *)


{
  open Pxp_types
  open Pxp_lexer_types

#insert open_pxp_lex_aux_*.src
}

#insert pxp_lex_defs_*.def


rule scan_within_tag = parse
    '\013' '\010'
      { tok_IgnoreLineEnd__Within_tag }
  | '\013'
      { tok_IgnoreLineEnd__Within_tag }
  | '\010'
      { tok_IgnoreLineEnd__Within_tag }
  | [' ' '\t']+
      { tok_Ignore__Within_tag }
  | name
      { Name (Lexing.lexeme lexbuf ), Within_tag }
  | '='
      { tok_Eq__Within_tag }
  | '"' character_except_quot* '"'
      { let l = Pxp_lexing.lexeme_len lexbuf in
	let v = Pxp_lexing.sub_lexeme lexbuf 1 (l-2) in
	Attval v, Within_tag }
  | '"'
      { raise (WF_error ("Cannot find the second quotation mark"))
      }
  | "'" character_except_apos* "'"
      { let l = Pxp_lexing.lexeme_len lexbuf in
	let v = Pxp_lexing.sub_lexeme lexbuf 1 (l-2) in
	Attval v, Within_tag }
  | "'"
      { raise (WF_error ("Cannot find the second quotation mark"))
      }
  | '>'
      { tok_Rangle__Content }
  | "/>"
      { tok_Rangle_empty__Content }
  | eof
      { tok_Eof__Within_tag }
  | character
      { raise (WF_error ("Illegal inside tags")) }
  | _
      { raise Netconversion.Malformed_code }


(* The following rule is used instead of scan_within_tag if event-based
 * attribute parsing is enabled. The difference is that more tokens are
 * generated for attribute values.
 *)

and scan_tag_eb = parse
    '\013' '\010'
      { tok_IgnoreLineEnd__Tag_eb }
  | '\013'
      { tok_IgnoreLineEnd__Tag_eb }
  | '\010'
      { tok_IgnoreLineEnd__Tag_eb }
  | [' ' '\t']+
      { tok_Ignore__Tag_eb }
  | name
      { Name (Lexing.lexeme lexbuf ), Tag_eb }
  | '='
      { tok_Eq__Tag_eb }
  | '"' 
      { tok_DQuote__Tag_eb_att_true }
  | "'"
      { tok_SQuote__Tag_eb_att_false }
  | '>'
      { tok_Rangle__Content }
  | "/>"
      { tok_Rangle_empty__Content }
  | eof
      { tok_Eof__Tag_eb }
  | character
      { raise (WF_error ("Illegal inside tags")) }
  | _
      { raise Netconversion.Malformed_code }


